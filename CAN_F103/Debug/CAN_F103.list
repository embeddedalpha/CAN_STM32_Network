
CAN_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008fc  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000a2c  08000a2c  00001a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a3c  08000a3c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000a3c  08000a3c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a3c  08000a3c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a3c  08000a3c  00001a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a40  08000a40  00001a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000a44  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000004  08000a48  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08000a48  00002090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000023ee  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000080b  00000000  00000000  0000441b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00004c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000bc  00000000  00000000  00004d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001176b  00000000  00000000  00004df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021e6  00000000  00000000  0001655f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059282  00000000  00000000  00018745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000719c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002e0  00000000  00000000  00071a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00071cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a14 	.word	0x08000a14

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000a14 	.word	0x08000a14

08000170 <CAN_Init>:
 * @operation		:	Configures the CAN controller as per the CAN_Config struct.
 *                      Take a look at the examples and the CAN_Config structure for
 *                      more information
 */
int CAN_Init(CAN_Config *config)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    RCC -> APB1ENR &= ~RCC_APB1ENR_CAN1EN;
 8000178:	4b2e      	ldr	r3, [pc, #184]	@ (8000234 <CAN_Init+0xc4>)
 800017a:	69db      	ldr	r3, [r3, #28]
 800017c:	4a2d      	ldr	r2, [pc, #180]	@ (8000234 <CAN_Init+0xc4>)
 800017e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000182:	61d3      	str	r3, [r2, #28]

    if(config->RX_Pin == CAN_Pin.RX.PA11) GPIO_Pin_Setup(GPIOA, 11, GPIO_Config.ALT_PUSH_PULL_OUTPUT);
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	791b      	ldrb	r3, [r3, #4]
 8000188:	2201      	movs	r2, #1
 800018a:	4293      	cmp	r3, r2
 800018c:	d106      	bne.n	800019c <CAN_Init+0x2c>
 800018e:	230b      	movs	r3, #11
 8000190:	461a      	mov	r2, r3
 8000192:	210b      	movs	r1, #11
 8000194:	4828      	ldr	r0, [pc, #160]	@ (8000238 <CAN_Init+0xc8>)
 8000196:	f000 f9c7 	bl	8000528 <GPIO_Pin_Setup>
 800019a:	e00a      	b.n	80001b2 <CAN_Init+0x42>
    else if(config->RX_Pin == CAN_Pin.RX.PB8) GPIO_Pin_Setup(GPIOB, 8, GPIO_Config.ALT_PUSH_PULL_OUTPUT);
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	791b      	ldrb	r3, [r3, #4]
 80001a0:	2202      	movs	r2, #2
 80001a2:	4293      	cmp	r3, r2
 80001a4:	d105      	bne.n	80001b2 <CAN_Init+0x42>
 80001a6:	230b      	movs	r3, #11
 80001a8:	461a      	mov	r2, r3
 80001aa:	2108      	movs	r1, #8
 80001ac:	4823      	ldr	r0, [pc, #140]	@ (800023c <CAN_Init+0xcc>)
 80001ae:	f000 f9bb 	bl	8000528 <GPIO_Pin_Setup>

    if(config->TX_Pin == CAN_Pin.TX.PA12) GPIO_Pin_Setup(GPIOA, 12, GPIO_Config.ALT_PUSH_PULL_OUTPUT);
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	795b      	ldrb	r3, [r3, #5]
 80001b6:	2203      	movs	r2, #3
 80001b8:	4293      	cmp	r3, r2
 80001ba:	d106      	bne.n	80001ca <CAN_Init+0x5a>
 80001bc:	230b      	movs	r3, #11
 80001be:	461a      	mov	r2, r3
 80001c0:	210c      	movs	r1, #12
 80001c2:	481d      	ldr	r0, [pc, #116]	@ (8000238 <CAN_Init+0xc8>)
 80001c4:	f000 f9b0 	bl	8000528 <GPIO_Pin_Setup>
 80001c8:	e00a      	b.n	80001e0 <CAN_Init+0x70>
    else if(config->TX_Pin == CAN_Pin.TX.PB9) GPIO_Pin_Setup(GPIOB, 9, GPIO_Config.ALT_PUSH_PULL_OUTPUT);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	795b      	ldrb	r3, [r3, #5]
 80001ce:	2204      	movs	r2, #4
 80001d0:	4293      	cmp	r3, r2
 80001d2:	d105      	bne.n	80001e0 <CAN_Init+0x70>
 80001d4:	230b      	movs	r3, #11
 80001d6:	461a      	mov	r2, r3
 80001d8:	2109      	movs	r1, #9
 80001da:	4818      	ldr	r0, [pc, #96]	@ (800023c <CAN_Init+0xcc>)
 80001dc:	f000 f9a4 	bl	8000528 <GPIO_Pin_Setup>

//    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
//    GPIOA -> CRH |= GPIO_CRH_CNF12_1 | GPIO_CRH_MODE12;
//    GPIOA -> CRH &= ~GPIO_CRH_CNF12_0;

    RCC -> APB1ENR |= RCC_APB1ENR_CAN1EN;
 80001e0:	4b14      	ldr	r3, [pc, #80]	@ (8000234 <CAN_Init+0xc4>)
 80001e2:	69db      	ldr	r3, [r3, #28]
 80001e4:	4a13      	ldr	r2, [pc, #76]	@ (8000234 <CAN_Init+0xc4>)
 80001e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001ea:	61d3      	str	r3, [r2, #28]


	config -> CAN_INSTANCE -> MCR	|= CAN_MCR_INRQ;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f042 0201 	orr.w	r2, r2, #1
 80001fa:	601a      	str	r2, [r3, #0]
	config -> CAN_INSTANCE -> MCR |= CAN_MCR_NART;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f042 0210 	orr.w	r2, r2, #16
 800020a:	601a      	str	r2, [r3, #0]
	config -> CAN_INSTANCE -> IER |= config -> interrupt;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	695a      	ldr	r2, [r3, #20]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	691b      	ldr	r3, [r3, #16]
 8000216:	4619      	mov	r1, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	430a      	orrs	r2, r1
 800021e:	615a      	str	r2, [r3, #20]
	config -> CAN_INSTANCE -> BTR = config -> Baudrate;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	6892      	ldr	r2, [r2, #8]
 8000228:	61da      	str	r2, [r3, #28]

	return 1;
 800022a:	2301      	movs	r3, #1
}
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40021000 	.word	0x40021000
 8000238:	40010800 	.word	0x40010800
 800023c:	40010c00 	.word	0x40010c00

08000240 <CAN_Filter_Init>:

int CAN_Filter_Init(CAN_Config *config, CAN_Filter_TypeDef *filter)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
	uint32_t can_id = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
	config -> CAN_INSTANCE -> FMR |= CAN_FMR_FINIT;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f042 0201 	orr.w	r2, r2, #1
 800025e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	if(filter->filter_id > 13)
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b0d      	cmp	r3, #13
 8000268:	dd02      	ble.n	8000270 <CAN_Filter_Init+0x30>
	{
		return -1;
 800026a:	f04f 33ff 	mov.w	r3, #4294967295
 800026e:	e072      	b.n	8000356 <CAN_Filter_Init+0x116>
	}
	else
	{
// ID INFORMATION
		if(filter -> id_type == CAN_ID.Standard)
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	2201      	movs	r2, #1
 8000276:	4293      	cmp	r3, r2
 8000278:	d104      	bne.n	8000284 <CAN_Filter_Init+0x44>
		{
			can_id = (filter->ID << 21) | 0;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	69db      	ldr	r3, [r3, #28]
 800027e:	055b      	lsls	r3, r3, #21
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e005      	b.n	8000290 <CAN_Filter_Init+0x50>
		}
		else
		{
			can_id = (filter->ID << 3) | 4;
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	69db      	ldr	r3, [r3, #28]
 8000288:	00db      	lsls	r3, r3, #3
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	60fb      	str	r3, [r7, #12]
		}

		if(filter -> frame_type == CAN_Frame.Remote_Frame)
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	220a      	movs	r2, #10
 8000296:	4293      	cmp	r3, r2
 8000298:	d103      	bne.n	80002a2 <CAN_Filter_Init+0x62>
		{
			can_id |= 2;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	f043 0302 	orr.w	r3, r3, #2
 80002a0:	60fb      	str	r3, [r7, #12]
		}

		config -> CAN_INSTANCE -> FA1R &= ~(1 << filter -> filter_id);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2101      	movs	r1, #1
 80002b0:	fa01 f303 	lsl.w	r3, r1, r3
 80002b4:	43db      	mvns	r3, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	400a      	ands	r2, r1
 80002be:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

		config -> CAN_INSTANCE -> FS1R |=  (1 << filter -> filter_id);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2101      	movs	r1, #1
 80002d0:	fa01 f303 	lsl.w	r3, r1, r3
 80002d4:	4619      	mov	r1, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	430a      	orrs	r2, r1
 80002dc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

		config -> CAN_INSTANCE -> sFilterRegister[filter->filter_id].FR1 = can_id;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	683a      	ldr	r2, [r7, #0]
 80002e6:	6812      	ldr	r2, [r2, #0]
 80002e8:	3248      	adds	r2, #72	@ 0x48
 80002ea:	68f9      	ldr	r1, [r7, #12]
 80002ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		config -> CAN_INSTANCE -> sFilterRegister[filter->filter_id].FR2 = can_id;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3348      	adds	r3, #72	@ 0x48
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	4413      	add	r3, r2
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	605a      	str	r2, [r3, #4]

		config -> CAN_INSTANCE -> FFA1R &= ~(1 << filter->filter_id);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2101      	movs	r1, #1
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	43db      	mvns	r3, r3
 8000316:	4619      	mov	r1, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
		config -> CAN_INSTANCE -> FA1R  |= (1 << filter->filter_id);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	4619      	mov	r1, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	430a      	orrs	r2, r1
 800033c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

		config -> CAN_INSTANCE -> FMR &= ~CAN_FMR_FINIT;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f022 0201 	bic.w	r2, r2, #1
 8000350:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	}
	return 1;
 8000354:	2301      	movs	r3, #1
}
 8000356:	4618      	mov	r0, r3
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <CAN_Start>:

void CAN_Start(CAN_Config *config)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	config -> CAN_INSTANCE -> MCR &= ~CAN_MCR_SLEEP;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f022 0202 	bic.w	r2, r2, #2
 8000376:	601a      	str	r2, [r3, #0]
	config -> CAN_INSTANCE -> MCR &= ~CAN_MCR_INRQ;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f022 0201 	bic.w	r2, r2, #1
 8000386:	601a      	str	r2, [r3, #0]
	while((config -> CAN_INSTANCE -> MSR & CAN_MSR_SLAK)){}
 8000388:	bf00      	nop
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	f003 0302 	and.w	r3, r3, #2
 8000394:	2b00      	cmp	r3, #0
 8000396:	d1f8      	bne.n	800038a <CAN_Start+0x2a>
	while((config -> CAN_INSTANCE ->MSR & CAN_MSR_INAK));
 8000398:	bf00      	nop
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d1f8      	bne.n	800039a <CAN_Start+0x3a>
}
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <CAN_Get_Packet>:
	while(config -> CAN_INSTANCE -> sTxMailBox[0].TIR & (1 << 0)){}

}

void CAN_Get_Packet(CAN_Config *config, CAN_RX_Typedef *rx)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b089      	sub	sp, #36	@ 0x24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
//	int fifo1_full, fifo2_full;
//	fifo1_full = (config -> CAN_INSTANCE -> RF0R & CAN_RF0R_FMP0_Msk) >> CAN_RF0R_FMP0_Pos;
//	fifo2_full = (config -> CAN_INSTANCE -> RF1R & CAN_RF1R_FMP1_Msk) >> CAN_RF1R_FMP1_Pos;

	int frame_type = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
	int id_type = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	613b      	str	r3, [r7, #16]



	id_type =  (CAN1 -> sFIFOMailBox[0].RIR & CAN_RI0R_IDE_Msk) >> CAN_RI0R_IDE_Pos ;
 80003c6:	4b57      	ldr	r3, [pc, #348]	@ (8000524 <CAN_Get_Packet+0x170>)
 80003c8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80003cc:	089b      	lsrs	r3, r3, #2
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	613b      	str	r3, [r7, #16]
	frame_type = (CAN1 -> sFIFOMailBox[0].RIR & CAN_RI0R_RTR_Msk) >> CAN_RI0R_RTR_Pos ;
 80003d4:	4b53      	ldr	r3, [pc, #332]	@ (8000524 <CAN_Get_Packet+0x170>)
 80003d6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80003da:	085b      	lsrs	r3, r3, #1
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	617b      	str	r3, [r7, #20]

	if(id_type)
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d00d      	beq.n	8000404 <CAN_Get_Packet+0x50>
	{
		//Extended ID
		rx->id_type = CAN_ID.Extended;
 80003e8:	2302      	movs	r3, #2
 80003ea:	461a      	mov	r2, r3
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	631a      	str	r2, [r3, #48]	@ 0x30
		rx->ID = (config -> CAN_INSTANCE -> sFIFOMailBox[0].RIR & CAN_RI0R_EXID_Msk) >> CAN_RI0R_EXID_Pos;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80003f8:	08db      	lsrs	r3, r3, #3
 80003fa:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	635a      	str	r2, [r3, #52]	@ 0x34
 8000402:	e00c      	b.n	800041e <CAN_Get_Packet+0x6a>
	}
	else
	{
		//Standard ID
		rx->id_type = CAN_ID.Standard;
 8000404:	2301      	movs	r3, #1
 8000406:	461a      	mov	r2, r3
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	631a      	str	r2, [r3, #48]	@ 0x30
		rx->ID = (config -> CAN_INSTANCE -> sFIFOMailBox[0].RIR & CAN_RI0R_STID_Msk) >> CAN_RI0R_STID_Pos;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8000414:	0d5b      	lsrs	r3, r3, #21
 8000416:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(frame_type)
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d01c      	beq.n	800045e <CAN_Get_Packet+0xaa>
	{
		//RTR Frame
		rx->frame_type = CAN_Frame.Remote_Frame;
 8000424:	230a      	movs	r3, #10
 8000426:	461a      	mov	r2, r3
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	62da      	str	r2, [r3, #44]	@ 0x2c
		rx->data_length = (config -> CAN_INSTANCE -> sFIFOMailBox[0].RDTR & CAN_RDT0R_DLC_Msk) >> CAN_RDT0R_DLC_Pos;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8000434:	f003 020f 	and.w	r2, r3, #15
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	605a      	str	r2, [r3, #4]
		config -> CAN_INSTANCE -> RF0R |= CAN_RF0R_RFOM0;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	68da      	ldr	r2, [r3, #12]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f042 0220 	orr.w	r2, r2, #32
 800044a:	60da      	str	r2, [r3, #12]
		while((config -> CAN_INSTANCE -> RF0R & CAN_RF0R_RFOM0)){}
 800044c:	bf00      	nop
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f8      	bne.n	800044e <CAN_Get_Packet+0x9a>

//		while((config -> CAN_INSTANCE -> RF0R & CAN_RF0R_RFOM0)){}
	}


}
 800045c:	e05c      	b.n	8000518 <CAN_Get_Packet+0x164>
		rx->frame_type = CAN_Frame.Data_Frame;
 800045e:	2300      	movs	r3, #0
 8000460:	461a      	mov	r2, r3
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	62da      	str	r2, [r3, #44]	@ 0x2c
		rx->data_length = (config -> CAN_INSTANCE -> sFIFOMailBox[0].RDTR & CAN_RDT0R_DLC_Msk) >> CAN_RDT0R_DLC_Pos;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800046e:	f003 020f 	and.w	r2, r3, #15
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	605a      	str	r2, [r3, #4]
		for(int i = 0; i < rx->data_length; i++)
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
 800047a:	e030      	b.n	80004de <CAN_Get_Packet+0x12a>
			if(i < 4)
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	2b03      	cmp	r3, #3
 8000480:	dc14      	bgt.n	80004ac <CAN_Get_Packet+0xf8>
				rx->data[i] =  (config -> CAN_INSTANCE -> sFIFOMailBox[0].RDLR & ( 0xFF << (8*i))) >> (8*i);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800048a:	69fa      	ldr	r2, [r7, #28]
 800048c:	00d2      	lsls	r2, r2, #3
 800048e:	21ff      	movs	r1, #255	@ 0xff
 8000490:	fa01 f202 	lsl.w	r2, r1, r2
 8000494:	401a      	ands	r2, r3
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	00db      	lsls	r3, r3, #3
 800049a:	fa22 f303 	lsr.w	r3, r2, r3
 800049e:	4619      	mov	r1, r3
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	69fa      	ldr	r2, [r7, #28]
 80004a4:	3202      	adds	r2, #2
 80004a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80004aa:	e015      	b.n	80004d8 <CAN_Get_Packet+0x124>
				rx->data[i] =  (config -> CAN_INSTANCE -> sFIFOMailBox[0].RDHR & ( 0xFF << (8*(i-4)))) >> (8*(i-4));
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 80004b4:	69fa      	ldr	r2, [r7, #28]
 80004b6:	3a04      	subs	r2, #4
 80004b8:	00d2      	lsls	r2, r2, #3
 80004ba:	21ff      	movs	r1, #255	@ 0xff
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	401a      	ands	r2, r3
 80004c2:	69fb      	ldr	r3, [r7, #28]
 80004c4:	3b04      	subs	r3, #4
 80004c6:	00db      	lsls	r3, r3, #3
 80004c8:	fa22 f303 	lsr.w	r3, r2, r3
 80004cc:	4619      	mov	r1, r3
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	69fa      	ldr	r2, [r7, #28]
 80004d2:	3202      	adds	r2, #2
 80004d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int i = 0; i < rx->data_length; i++)
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	3301      	adds	r3, #1
 80004dc:	61fb      	str	r3, [r7, #28]
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	69fa      	ldr	r2, [r7, #28]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	dbc9      	blt.n	800047c <CAN_Get_Packet+0xc8>
		int x = (config -> CAN_INSTANCE -> RF0R & CAN_RF0R_FMP0_Msk);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	68db      	ldr	r3, [r3, #12]
 80004ee:	f003 0303 	and.w	r3, r3, #3
 80004f2:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < x; i++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	e00a      	b.n	8000510 <CAN_Get_Packet+0x15c>
			config -> CAN_INSTANCE -> RF0R |= CAN_RF0R_RFOM0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	68da      	ldr	r2, [r3, #12]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f042 0220 	orr.w	r2, r2, #32
 8000508:	60da      	str	r2, [r3, #12]
		for(int i = 0; i < x; i++)
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	3301      	adds	r3, #1
 800050e:	61bb      	str	r3, [r7, #24]
 8000510:	69ba      	ldr	r2, [r7, #24]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	429a      	cmp	r2, r3
 8000516:	dbf0      	blt.n	80004fa <CAN_Get_Packet+0x146>
}
 8000518:	bf00      	nop
 800051a:	3724      	adds	r7, #36	@ 0x24
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40006400 	.word	0x40006400

08000528 <GPIO_Pin_Setup>:
#include "GPIO.h"



void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	70fb      	strb	r3, [r7, #3]
 8000534:	4613      	mov	r3, r2
 8000536:	70bb      	strb	r3, [r7, #2]
	if(Port == GPIOA)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a4d      	ldr	r2, [pc, #308]	@ (8000670 <GPIO_Pin_Setup+0x148>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d12d      	bne.n	800059c <GPIO_Pin_Setup+0x74>
	{
		if((function == GPIO_Config.ALT_OPEN_DRAIN_OUTPUT) || (function == GPIO_Config.ALT_PUSH_PULL_OUTPUT))
 8000540:	220f      	movs	r2, #15
 8000542:	78bb      	ldrb	r3, [r7, #2]
 8000544:	4293      	cmp	r3, r2
 8000546:	d003      	beq.n	8000550 <GPIO_Pin_Setup+0x28>
 8000548:	220b      	movs	r2, #11
 800054a:	78bb      	ldrb	r3, [r7, #2]
 800054c:	4293      	cmp	r3, r2
 800054e:	d106      	bne.n	800055e <GPIO_Pin_Setup+0x36>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 8000550:	4b48      	ldr	r3, [pc, #288]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a47      	ldr	r2, [pc, #284]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 8000556:	f043 0305 	orr.w	r3, r3, #5
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	e005      	b.n	800056a <GPIO_Pin_Setup+0x42>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800055e:	4b45      	ldr	r3, [pc, #276]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a44      	ldr	r2, [pc, #272]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 8000564:	f043 0304 	orr.w	r3, r3, #4
 8000568:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 800056a:	78fb      	ldrb	r3, [r7, #3]
 800056c:	2b07      	cmp	r3, #7
 800056e:	d80a      	bhi.n	8000586 <GPIO_Pin_Setup+0x5e>
		{
			Port -> CRL |= function << (4*pin);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	78b9      	ldrb	r1, [r7, #2]
 8000576:	78fa      	ldrb	r2, [r7, #3]
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	fa01 f202 	lsl.w	r2, r1, r2
 800057e:	431a      	orrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	e00a      	b.n	800059c <GPIO_Pin_Setup+0x74>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	78b9      	ldrb	r1, [r7, #2]
 800058c:	78fa      	ldrb	r2, [r7, #3]
 800058e:	3a08      	subs	r2, #8
 8000590:	0092      	lsls	r2, r2, #2
 8000592:	fa01 f202 	lsl.w	r2, r1, r2
 8000596:	431a      	orrs	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	605a      	str	r2, [r3, #4]
		}
	}


	if(Port == GPIOB)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a36      	ldr	r2, [pc, #216]	@ (8000678 <GPIO_Pin_Setup+0x150>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d12d      	bne.n	8000600 <GPIO_Pin_Setup+0xd8>
	{
		if((function == GPIO_Config.ALT_OPEN_DRAIN_OUTPUT) || (function == GPIO_Config.ALT_PUSH_PULL_OUTPUT))
 80005a4:	220f      	movs	r2, #15
 80005a6:	78bb      	ldrb	r3, [r7, #2]
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d003      	beq.n	80005b4 <GPIO_Pin_Setup+0x8c>
 80005ac:	220b      	movs	r2, #11
 80005ae:	78bb      	ldrb	r3, [r7, #2]
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d106      	bne.n	80005c2 <GPIO_Pin_Setup+0x9a>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 80005b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a2e      	ldr	r2, [pc, #184]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 80005ba:	f043 0309 	orr.w	r3, r3, #9
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	e005      	b.n	80005ce <GPIO_Pin_Setup+0xa6>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4a2b      	ldr	r2, [pc, #172]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 80005c8:	f043 0308 	orr.w	r3, r3, #8
 80005cc:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	2b07      	cmp	r3, #7
 80005d2:	d80a      	bhi.n	80005ea <GPIO_Pin_Setup+0xc2>
		{
			Port -> CRL |= function << (4*pin);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	78b9      	ldrb	r1, [r7, #2]
 80005da:	78fa      	ldrb	r2, [r7, #3]
 80005dc:	0092      	lsls	r2, r2, #2
 80005de:	fa01 f202 	lsl.w	r2, r1, r2
 80005e2:	431a      	orrs	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	e00a      	b.n	8000600 <GPIO_Pin_Setup+0xd8>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	78b9      	ldrb	r1, [r7, #2]
 80005f0:	78fa      	ldrb	r2, [r7, #3]
 80005f2:	3a08      	subs	r2, #8
 80005f4:	0092      	lsls	r2, r2, #2
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	431a      	orrs	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	605a      	str	r2, [r3, #4]
		}
	}

	if(Port == GPIOC)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a1e      	ldr	r2, [pc, #120]	@ (800067c <GPIO_Pin_Setup+0x154>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d12d      	bne.n	8000664 <GPIO_Pin_Setup+0x13c>
	{
		if((function == GPIO_Config.ALT_OPEN_DRAIN_OUTPUT) || (function == GPIO_Config.ALT_PUSH_PULL_OUTPUT))
 8000608:	220f      	movs	r2, #15
 800060a:	78bb      	ldrb	r3, [r7, #2]
 800060c:	4293      	cmp	r3, r2
 800060e:	d003      	beq.n	8000618 <GPIO_Pin_Setup+0xf0>
 8000610:	220b      	movs	r2, #11
 8000612:	78bb      	ldrb	r3, [r7, #2]
 8000614:	4293      	cmp	r3, r2
 8000616:	d106      	bne.n	8000626 <GPIO_Pin_Setup+0xfe>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a15      	ldr	r2, [pc, #84]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 800061e:	f043 0311 	orr.w	r3, r3, #17
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	e005      	b.n	8000632 <GPIO_Pin_Setup+0x10a>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000626:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a12      	ldr	r2, [pc, #72]	@ (8000674 <GPIO_Pin_Setup+0x14c>)
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	2b07      	cmp	r3, #7
 8000636:	d80a      	bhi.n	800064e <GPIO_Pin_Setup+0x126>
		{
			Port -> CRL |= function << (4*pin);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	78b9      	ldrb	r1, [r7, #2]
 800063e:	78fa      	ldrb	r2, [r7, #3]
 8000640:	0092      	lsls	r2, r2, #2
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	431a      	orrs	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	601a      	str	r2, [r3, #0]
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
		}
	}
}
 800064c:	e00a      	b.n	8000664 <GPIO_Pin_Setup+0x13c>
			Port -> CRH |= function << (4*(pin - 8));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	78b9      	ldrb	r1, [r7, #2]
 8000654:	78fa      	ldrb	r2, [r7, #3]
 8000656:	3a08      	subs	r2, #8
 8000658:	0092      	lsls	r2, r2, #2
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	431a      	orrs	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	605a      	str	r2, [r3, #4]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40010800 	.word	0x40010800
 8000674:	40021000 	.word	0x40021000
 8000678:	40010c00 	.word	0x40010c00
 800067c:	40011000 	.word	0x40011000

08000680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	2b00      	cmp	r3, #0
 8000690:	db0b      	blt.n	80006aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 021f 	and.w	r2, r3, #31
 8000698:	4906      	ldr	r1, [pc, #24]	@ (80006b4 <__NVIC_EnableIRQ+0x34>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	095b      	lsrs	r3, r3, #5
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	@ (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	@ (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b01      	subs	r3, #1
 8000718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800071c:	d301      	bcc.n	8000722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071e:	2301      	movs	r3, #1
 8000720:	e00f      	b.n	8000742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000722:	4a0a      	ldr	r2, [pc, #40]	@ (800074c <SysTick_Config+0x40>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072a:	210f      	movs	r1, #15
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f7ff ffc2 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <SysTick_Config+0x40>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	4b04      	ldr	r3, [pc, #16]	@ (800074c <SysTick_Config+0x40>)
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	e000e010 	.word	0xe000e010

08000750 <MCU_Clock_Setup>:
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}


__STATIC_INLINE void MCU_Clock_Setup()
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON ;
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MCU_Clock_Setup+0x88>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a1f      	ldr	r2, [pc, #124]	@ (80007d8 <MCU_Clock_Setup+0x88>)
 800075a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800075e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000760:	bf00      	nop
 8000762:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MCU_Clock_Setup+0x88>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0f9      	beq.n	8000762 <MCU_Clock_Setup+0x12>
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_1;
 800076e:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MCU_Clock_Setup+0x8c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a1a      	ldr	r2, [pc, #104]	@ (80007dc <MCU_Clock_Setup+0x8c>)
 8000774:	f043 0312 	orr.w	r3, r3, #18
 8000778:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE_HSE | RCC_CFGR_PLLMULL9 | RCC_CFGR_PPRE1_DIV2);
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MCU_Clock_Setup+0x88>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4a16      	ldr	r2, [pc, #88]	@ (80007d8 <MCU_Clock_Setup+0x88>)
 8000780:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8000784:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000788:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MCU_Clock_Setup+0x88>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <MCU_Clock_Setup+0x88>)
 8000790:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000794:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000796:	bf00      	nop
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MCU_Clock_Setup+0x88>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0f9      	beq.n	8000798 <MCU_Clock_Setup+0x48>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MCU_Clock_Setup+0x88>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	4a0b      	ldr	r2, [pc, #44]	@ (80007d8 <MCU_Clock_Setup+0x88>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 80007b0:	bf00      	nop
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MCU_Clock_Setup+0x88>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f9      	beq.n	80007b2 <MCU_Clock_Setup+0x62>
	SystemCoreClockUpdate();
 80007be:	f000 f869 	bl	8000894 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/72);
 80007c2:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <MCU_Clock_Setup+0x90>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a07      	ldr	r2, [pc, #28]	@ (80007e4 <MCU_Clock_Setup+0x94>)
 80007c8:	fba2 2303 	umull	r2, r3, r2, r3
 80007cc:	091b      	lsrs	r3, r3, #4
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff9c 	bl	800070c <SysTick_Config>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40022000 	.word	0x40022000
 80007e0:	20000000 	.word	0x20000000
 80007e4:	38e38e39 	.word	0x38e38e39

080007e8 <main>:
void CAN1_RX0_IRQHandler(void);

bool flag = 0;

int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 80007ec:	f7ff ffb0 	bl	8000750 <MCU_Clock_Setup>

	SLAVE1.CAN_INSTANCE = CAN1;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <main+0x88>)
 80007f2:	4a20      	ldr	r2, [pc, #128]	@ (8000874 <main+0x8c>)
 80007f4:	601a      	str	r2, [r3, #0]
	SLAVE1.RX_Pin = CAN_Pin.RX.PA11;
 80007f6:	2201      	movs	r2, #1
 80007f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <main+0x88>)
 80007fa:	711a      	strb	r2, [r3, #4]
	SLAVE1.TX_Pin = CAN_Pin.TX.PA12;
 80007fc:	2203      	movs	r2, #3
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <main+0x88>)
 8000800:	715a      	strb	r2, [r3, #5]
	SLAVE1.Baudrate = CAN_Baudrate.CAN_BAUDRATE_1000_KBPS;
 8000802:	4a1d      	ldr	r2, [pc, #116]	@ (8000878 <main+0x90>)
 8000804:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <main+0x88>)
 8000806:	609a      	str	r2, [r3, #8]
	SLAVE1.interrupt = CAN_Interrupt.Fifo0_Message_Pending;
 8000808:	2302      	movs	r3, #2
 800080a:	461a      	mov	r2, r3
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <main+0x88>)
 800080e:	611a      	str	r2, [r3, #16]
	CAN_Init(&SLAVE1);
 8000810:	4817      	ldr	r0, [pc, #92]	@ (8000870 <main+0x88>)
 8000812:	f7ff fcad 	bl	8000170 <CAN_Init>

	SLAVE1_filter.ID = 0x00;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <main+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
	SLAVE1_filter.filter_id = 0;
 800081c:	4b17      	ldr	r3, [pc, #92]	@ (800087c <main+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
	SLAVE1_filter.id_type = CAN_ID.Standard;
 8000822:	2301      	movs	r3, #1
 8000824:	461a      	mov	r2, r3
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <main+0x94>)
 8000828:	609a      	str	r2, [r3, #8]
	SLAVE1_filter.frame_type = CAN_Frame.Data_Frame;
 800082a:	2300      	movs	r3, #0
 800082c:	461a      	mov	r2, r3
 800082e:	4b13      	ldr	r3, [pc, #76]	@ (800087c <main+0x94>)
 8000830:	60da      	str	r2, [r3, #12]
	CAN_Filter_Init(&SLAVE1, &SLAVE1_filter);
 8000832:	4912      	ldr	r1, [pc, #72]	@ (800087c <main+0x94>)
 8000834:	480e      	ldr	r0, [pc, #56]	@ (8000870 <main+0x88>)
 8000836:	f7ff fd03 	bl	8000240 <CAN_Filter_Init>
	CAN_Start(&SLAVE1);
 800083a:	480d      	ldr	r0, [pc, #52]	@ (8000870 <main+0x88>)
 800083c:	f7ff fd90 	bl	8000360 <CAN_Start>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop

	__disable_irq();
	NVIC_SetPriority(CAN1_RX0_IRQn,0);
 8000844:	2100      	movs	r1, #0
 8000846:	2014      	movs	r0, #20
 8000848:	f7ff ff36 	bl	80006b8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800084c:	2015      	movs	r0, #21
 800084e:	f7ff ff17 	bl	8000680 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000852:	b662      	cpsie	i
}
 8000854:	bf00      	nop



	for(;;)
	{
		if(flag == 1)
 8000856:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <main+0x98>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0fb      	beq.n	8000856 <main+0x6e>
		{
			CAN_Get_Packet(&SLAVE1, &SLAVE1_RX);
 800085e:	4909      	ldr	r1, [pc, #36]	@ (8000884 <main+0x9c>)
 8000860:	4803      	ldr	r0, [pc, #12]	@ (8000870 <main+0x88>)
 8000862:	f7ff fda7 	bl	80003b4 <CAN_Get_Packet>


			flag = 0;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <main+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
		if(flag == 1)
 800086c:	e7f3      	b.n	8000856 <main+0x6e>
 800086e:	bf00      	nop
 8000870:	20000020 	.word	0x20000020
 8000874:	40006400 	.word	0x40006400
 8000878:	001e0001 	.word	0x001e0001
 800087c:	2000006c 	.word	0x2000006c
 8000880:	2000008c 	.word	0x2000008c
 8000884:	20000034 	.word	0x20000034

08000888 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000964 <SystemCoreClockUpdate+0xd0>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f003 030c 	and.w	r3, r3, #12
 80008ae:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b08      	cmp	r3, #8
 80008b4:	d011      	beq.n	80008da <SystemCoreClockUpdate+0x46>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	d83a      	bhi.n	8000932 <SystemCoreClockUpdate+0x9e>
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d003      	beq.n	80008ca <SystemCoreClockUpdate+0x36>
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d004      	beq.n	80008d2 <SystemCoreClockUpdate+0x3e>
 80008c8:	e033      	b.n	8000932 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80008ca:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <SystemCoreClockUpdate+0xd4>)
 80008cc:	4a27      	ldr	r2, [pc, #156]	@ (800096c <SystemCoreClockUpdate+0xd8>)
 80008ce:	601a      	str	r2, [r3, #0]
      break;
 80008d0:	e033      	b.n	800093a <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80008d2:	4b25      	ldr	r3, [pc, #148]	@ (8000968 <SystemCoreClockUpdate+0xd4>)
 80008d4:	4a25      	ldr	r2, [pc, #148]	@ (800096c <SystemCoreClockUpdate+0xd8>)
 80008d6:	601a      	str	r2, [r3, #0]
      break;
 80008d8:	e02f      	b.n	800093a <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80008da:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <SystemCoreClockUpdate+0xd0>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80008e2:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <SystemCoreClockUpdate+0xd0>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008ec:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	0c9b      	lsrs	r3, r3, #18
 80008f2:	3302      	adds	r3, #2
 80008f4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d106      	bne.n	800090a <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <SystemCoreClockUpdate+0xdc>)
 8000900:	fb02 f303 	mul.w	r3, r2, r3
 8000904:	4a18      	ldr	r2, [pc, #96]	@ (8000968 <SystemCoreClockUpdate+0xd4>)
 8000906:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000908:	e017      	b.n	800093a <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <SystemCoreClockUpdate+0xd0>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000912:	2b00      	cmp	r3, #0
 8000914:	d006      	beq.n	8000924 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	4a15      	ldr	r2, [pc, #84]	@ (8000970 <SystemCoreClockUpdate+0xdc>)
 800091a:	fb02 f303 	mul.w	r3, r2, r3
 800091e:	4a12      	ldr	r2, [pc, #72]	@ (8000968 <SystemCoreClockUpdate+0xd4>)
 8000920:	6013      	str	r3, [r2, #0]
      break;
 8000922:	e00a      	b.n	800093a <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4a11      	ldr	r2, [pc, #68]	@ (800096c <SystemCoreClockUpdate+0xd8>)
 8000928:	fb02 f303 	mul.w	r3, r2, r3
 800092c:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <SystemCoreClockUpdate+0xd4>)
 800092e:	6013      	str	r3, [r2, #0]
      break;
 8000930:	e003      	b.n	800093a <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <SystemCoreClockUpdate+0xd4>)
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <SystemCoreClockUpdate+0xd8>)
 8000936:	601a      	str	r2, [r3, #0]
      break;
 8000938:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <SystemCoreClockUpdate+0xd0>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	091b      	lsrs	r3, r3, #4
 8000940:	f003 030f 	and.w	r3, r3, #15
 8000944:	4a0b      	ldr	r2, [pc, #44]	@ (8000974 <SystemCoreClockUpdate+0xe0>)
 8000946:	5cd3      	ldrb	r3, [r2, r3]
 8000948:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800094a:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <SystemCoreClockUpdate+0xd4>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	fa22 f303 	lsr.w	r3, r2, r3
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <SystemCoreClockUpdate+0xd4>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	20000000 	.word	0x20000000
 800096c:	007a1200 	.word	0x007a1200
 8000970:	003d0900 	.word	0x003d0900
 8000974:	08000a2c 	.word	0x08000a2c

08000978 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000978:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800097a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800097c:	f7ff ff84 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000982:	490d      	ldr	r1, [pc, #52]	@ (80009b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000984:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <LoopForever+0xe>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000998:	4c0a      	ldr	r4, [pc, #40]	@ (80009c4 <LoopForever+0x16>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a6:	f000 f811 	bl	80009cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009aa:	f7ff ff1d 	bl	80007e8 <main>

080009ae <LoopForever>:

LoopForever:
  b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
  ldr   r0, =_estack
 80009b0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80009bc:	08000a44 	.word	0x08000a44
  ldr r2, =_sbss
 80009c0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80009c4:	20000090 	.word	0x20000090

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>
	...

080009cc <__libc_init_array>:
 80009cc:	b570      	push	{r4, r5, r6, lr}
 80009ce:	2600      	movs	r6, #0
 80009d0:	4d0c      	ldr	r5, [pc, #48]	@ (8000a04 <__libc_init_array+0x38>)
 80009d2:	4c0d      	ldr	r4, [pc, #52]	@ (8000a08 <__libc_init_array+0x3c>)
 80009d4:	1b64      	subs	r4, r4, r5
 80009d6:	10a4      	asrs	r4, r4, #2
 80009d8:	42a6      	cmp	r6, r4
 80009da:	d109      	bne.n	80009f0 <__libc_init_array+0x24>
 80009dc:	f000 f81a 	bl	8000a14 <_init>
 80009e0:	2600      	movs	r6, #0
 80009e2:	4d0a      	ldr	r5, [pc, #40]	@ (8000a0c <__libc_init_array+0x40>)
 80009e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a10 <__libc_init_array+0x44>)
 80009e6:	1b64      	subs	r4, r4, r5
 80009e8:	10a4      	asrs	r4, r4, #2
 80009ea:	42a6      	cmp	r6, r4
 80009ec:	d105      	bne.n	80009fa <__libc_init_array+0x2e>
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f4:	4798      	blx	r3
 80009f6:	3601      	adds	r6, #1
 80009f8:	e7ee      	b.n	80009d8 <__libc_init_array+0xc>
 80009fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80009fe:	4798      	blx	r3
 8000a00:	3601      	adds	r6, #1
 8000a02:	e7f2      	b.n	80009ea <__libc_init_array+0x1e>
 8000a04:	08000a3c 	.word	0x08000a3c
 8000a08:	08000a3c 	.word	0x08000a3c
 8000a0c:	08000a3c 	.word	0x08000a3c
 8000a10:	08000a40 	.word	0x08000a40

08000a14 <_init>:
 8000a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a16:	bf00      	nop
 8000a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a1a:	bc08      	pop	{r3}
 8000a1c:	469e      	mov	lr, r3
 8000a1e:	4770      	bx	lr

08000a20 <_fini>:
 8000a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a22:	bf00      	nop
 8000a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a26:	bc08      	pop	{r3}
 8000a28:	469e      	mov	lr, r3
 8000a2a:	4770      	bx	lr
