
CAN_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000076c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800089c  0800089c  0000189c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008ac  080008ac  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080008ac  080008ac  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008ac  080008ac  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008ac  080008ac  000018ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008b0  080008b0  000018b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080008b4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000004  080008b8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  080008b8  00002054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000023d6  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000080b  00000000  00000000  00004403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00004c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000bc  00000000  00000000  00004d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001176b  00000000  00000000  00004ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021dd  00000000  00000000  00016547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005927d  00000000  00000000  00018724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000719a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002dc  00000000  00000000  000719e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00071cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000884 	.word	0x08000884

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000884 	.word	0x08000884

08000170 <CAN_Init>:
 * @operation		:	Configures the CAN controller as per the CAN_Config struct.
 *                      Take a look at the examples and the CAN_Config structure for
 *                      more information
 */
int CAN_Init(CAN_Config *config)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    RCC -> APB1ENR &= ~RCC_APB1ENR_CAN1EN;
 8000178:	4b2e      	ldr	r3, [pc, #184]	@ (8000234 <CAN_Init+0xc4>)
 800017a:	69db      	ldr	r3, [r3, #28]
 800017c:	4a2d      	ldr	r2, [pc, #180]	@ (8000234 <CAN_Init+0xc4>)
 800017e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000182:	61d3      	str	r3, [r2, #28]

    if(config->RX_Pin == CAN_Pin.RX.PA11) GPIO_Pin_Setup(GPIOA, 11, GPIO_Config.ALT_PUSH_PULL_OUTPUT);
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	791b      	ldrb	r3, [r3, #4]
 8000188:	2201      	movs	r2, #1
 800018a:	4293      	cmp	r3, r2
 800018c:	d106      	bne.n	800019c <CAN_Init+0x2c>
 800018e:	230b      	movs	r3, #11
 8000190:	461a      	mov	r2, r3
 8000192:	210b      	movs	r1, #11
 8000194:	4828      	ldr	r0, [pc, #160]	@ (8000238 <CAN_Init+0xc8>)
 8000196:	f000 f90d 	bl	80003b4 <GPIO_Pin_Setup>
 800019a:	e00a      	b.n	80001b2 <CAN_Init+0x42>
    else if(config->RX_Pin == CAN_Pin.RX.PB8) GPIO_Pin_Setup(GPIOB, 8, GPIO_Config.ALT_PUSH_PULL_OUTPUT);
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	791b      	ldrb	r3, [r3, #4]
 80001a0:	2202      	movs	r2, #2
 80001a2:	4293      	cmp	r3, r2
 80001a4:	d105      	bne.n	80001b2 <CAN_Init+0x42>
 80001a6:	230b      	movs	r3, #11
 80001a8:	461a      	mov	r2, r3
 80001aa:	2108      	movs	r1, #8
 80001ac:	4823      	ldr	r0, [pc, #140]	@ (800023c <CAN_Init+0xcc>)
 80001ae:	f000 f901 	bl	80003b4 <GPIO_Pin_Setup>

    if(config->TX_Pin == CAN_Pin.TX.PA12) GPIO_Pin_Setup(GPIOA, 12, GPIO_Config.ALT_PUSH_PULL_OUTPUT);
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	795b      	ldrb	r3, [r3, #5]
 80001b6:	2203      	movs	r2, #3
 80001b8:	4293      	cmp	r3, r2
 80001ba:	d106      	bne.n	80001ca <CAN_Init+0x5a>
 80001bc:	230b      	movs	r3, #11
 80001be:	461a      	mov	r2, r3
 80001c0:	210c      	movs	r1, #12
 80001c2:	481d      	ldr	r0, [pc, #116]	@ (8000238 <CAN_Init+0xc8>)
 80001c4:	f000 f8f6 	bl	80003b4 <GPIO_Pin_Setup>
 80001c8:	e00a      	b.n	80001e0 <CAN_Init+0x70>
    else if(config->TX_Pin == CAN_Pin.TX.PB9) GPIO_Pin_Setup(GPIOB, 9, GPIO_Config.ALT_PUSH_PULL_OUTPUT);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	795b      	ldrb	r3, [r3, #5]
 80001ce:	2204      	movs	r2, #4
 80001d0:	4293      	cmp	r3, r2
 80001d2:	d105      	bne.n	80001e0 <CAN_Init+0x70>
 80001d4:	230b      	movs	r3, #11
 80001d6:	461a      	mov	r2, r3
 80001d8:	2109      	movs	r1, #9
 80001da:	4818      	ldr	r0, [pc, #96]	@ (800023c <CAN_Init+0xcc>)
 80001dc:	f000 f8ea 	bl	80003b4 <GPIO_Pin_Setup>

//    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
//    GPIOA -> CRH |= GPIO_CRH_CNF12_1 | GPIO_CRH_MODE12;
//    GPIOA -> CRH &= ~GPIO_CRH_CNF12_0;

    RCC -> APB1ENR |= RCC_APB1ENR_CAN1EN;
 80001e0:	4b14      	ldr	r3, [pc, #80]	@ (8000234 <CAN_Init+0xc4>)
 80001e2:	69db      	ldr	r3, [r3, #28]
 80001e4:	4a13      	ldr	r2, [pc, #76]	@ (8000234 <CAN_Init+0xc4>)
 80001e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001ea:	61d3      	str	r3, [r2, #28]


	config -> CAN_INSTANCE -> MCR	|= CAN_MCR_INRQ;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f042 0201 	orr.w	r2, r2, #1
 80001fa:	601a      	str	r2, [r3, #0]
	config -> CAN_INSTANCE -> MCR |= CAN_MCR_NART;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f042 0210 	orr.w	r2, r2, #16
 800020a:	601a      	str	r2, [r3, #0]
	config -> CAN_INSTANCE -> IER |= config -> interrupt;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	695a      	ldr	r2, [r3, #20]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	691b      	ldr	r3, [r3, #16]
 8000216:	4619      	mov	r1, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	430a      	orrs	r2, r1
 800021e:	615a      	str	r2, [r3, #20]
	config -> CAN_INSTANCE -> BTR = config -> Baudrate;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	6892      	ldr	r2, [r2, #8]
 8000228:	61da      	str	r2, [r3, #28]

	return 1;
 800022a:	2301      	movs	r3, #1
}
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40021000 	.word	0x40021000
 8000238:	40010800 	.word	0x40010800
 800023c:	40010c00 	.word	0x40010c00

08000240 <CAN_Filter_Init>:

int CAN_Filter_Init(CAN_Config *config, CAN_Filter_TypeDef *filter)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
	uint32_t can_id = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
	config -> CAN_INSTANCE -> FMR |= CAN_FMR_FINIT;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f042 0201 	orr.w	r2, r2, #1
 800025e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	if(filter->filter_id > 13)
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b0d      	cmp	r3, #13
 8000268:	dd02      	ble.n	8000270 <CAN_Filter_Init+0x30>
	{
		return -1;
 800026a:	f04f 33ff 	mov.w	r3, #4294967295
 800026e:	e072      	b.n	8000356 <CAN_Filter_Init+0x116>
	}
	else
	{
// ID INFORMATION
		if(filter -> id_type == CAN_ID.Standard)
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	2201      	movs	r2, #1
 8000276:	4293      	cmp	r3, r2
 8000278:	d104      	bne.n	8000284 <CAN_Filter_Init+0x44>
		{
			can_id = (filter->ID << 21) | 0;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	69db      	ldr	r3, [r3, #28]
 800027e:	055b      	lsls	r3, r3, #21
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e005      	b.n	8000290 <CAN_Filter_Init+0x50>
		}
		else
		{
			can_id = (filter->ID << 3) | 4;
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	69db      	ldr	r3, [r3, #28]
 8000288:	00db      	lsls	r3, r3, #3
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	60fb      	str	r3, [r7, #12]
		}

		if(filter -> frame_type == CAN_Frame.Remote_Frame)
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	220a      	movs	r2, #10
 8000296:	4293      	cmp	r3, r2
 8000298:	d103      	bne.n	80002a2 <CAN_Filter_Init+0x62>
		{
			can_id |= 2;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	f043 0302 	orr.w	r3, r3, #2
 80002a0:	60fb      	str	r3, [r7, #12]
		}

		config -> CAN_INSTANCE -> FA1R &= ~(1 << filter -> filter_id);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2101      	movs	r1, #1
 80002b0:	fa01 f303 	lsl.w	r3, r1, r3
 80002b4:	43db      	mvns	r3, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	400a      	ands	r2, r1
 80002be:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

		config -> CAN_INSTANCE -> FS1R |=  (1 << filter -> filter_id);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2101      	movs	r1, #1
 80002d0:	fa01 f303 	lsl.w	r3, r1, r3
 80002d4:	4619      	mov	r1, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	430a      	orrs	r2, r1
 80002dc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

		config -> CAN_INSTANCE -> sFilterRegister[filter->filter_id].FR1 = can_id;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	683a      	ldr	r2, [r7, #0]
 80002e6:	6812      	ldr	r2, [r2, #0]
 80002e8:	3248      	adds	r2, #72	@ 0x48
 80002ea:	68f9      	ldr	r1, [r7, #12]
 80002ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		config -> CAN_INSTANCE -> sFilterRegister[filter->filter_id].FR2 = can_id;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3348      	adds	r3, #72	@ 0x48
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	4413      	add	r3, r2
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	605a      	str	r2, [r3, #4]

		config -> CAN_INSTANCE -> FFA1R &= ~(1 << filter->filter_id);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2101      	movs	r1, #1
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	43db      	mvns	r3, r3
 8000316:	4619      	mov	r1, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
		config -> CAN_INSTANCE -> FA1R  |= (1 << filter->filter_id);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	4619      	mov	r1, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	430a      	orrs	r2, r1
 800033c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

		config -> CAN_INSTANCE -> FMR &= ~CAN_FMR_FINIT;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f022 0201 	bic.w	r2, r2, #1
 8000350:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	}
	return 1;
 8000354:	2301      	movs	r3, #1
}
 8000356:	4618      	mov	r0, r3
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <CAN_Start>:

void CAN_Start(CAN_Config *config)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	config -> CAN_INSTANCE -> MCR &= ~CAN_MCR_SLEEP;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f022 0202 	bic.w	r2, r2, #2
 8000376:	601a      	str	r2, [r3, #0]
	config -> CAN_INSTANCE -> MCR &= ~CAN_MCR_INRQ;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f022 0201 	bic.w	r2, r2, #1
 8000386:	601a      	str	r2, [r3, #0]
	while((config -> CAN_INSTANCE -> MSR & CAN_MSR_SLAK)){}
 8000388:	bf00      	nop
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	f003 0302 	and.w	r3, r3, #2
 8000394:	2b00      	cmp	r3, #0
 8000396:	d1f8      	bne.n	800038a <CAN_Start+0x2a>
	while((config -> CAN_INSTANCE ->MSR & CAN_MSR_INAK));
 8000398:	bf00      	nop
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d1f8      	bne.n	800039a <CAN_Start+0x3a>
}
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <GPIO_Pin_Setup>:
#include "GPIO.h"



void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	70fb      	strb	r3, [r7, #3]
 80003c0:	4613      	mov	r3, r2
 80003c2:	70bb      	strb	r3, [r7, #2]
	if(Port == GPIOA)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a4d      	ldr	r2, [pc, #308]	@ (80004fc <GPIO_Pin_Setup+0x148>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d12d      	bne.n	8000428 <GPIO_Pin_Setup+0x74>
	{
		if((function == GPIO_Config.ALT_OPEN_DRAIN_OUTPUT) || (function == GPIO_Config.ALT_PUSH_PULL_OUTPUT))
 80003cc:	220f      	movs	r2, #15
 80003ce:	78bb      	ldrb	r3, [r7, #2]
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d003      	beq.n	80003dc <GPIO_Pin_Setup+0x28>
 80003d4:	220b      	movs	r2, #11
 80003d6:	78bb      	ldrb	r3, [r7, #2]
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_Pin_Setup+0x36>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 80003dc:	4b48      	ldr	r3, [pc, #288]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a47      	ldr	r2, [pc, #284]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 80003e2:	f043 0305 	orr.w	r3, r3, #5
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	e005      	b.n	80003f6 <GPIO_Pin_Setup+0x42>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80003ea:	4b45      	ldr	r3, [pc, #276]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a44      	ldr	r2, [pc, #272]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 80003f6:	78fb      	ldrb	r3, [r7, #3]
 80003f8:	2b07      	cmp	r3, #7
 80003fa:	d80a      	bhi.n	8000412 <GPIO_Pin_Setup+0x5e>
		{
			Port -> CRL |= function << (4*pin);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	78b9      	ldrb	r1, [r7, #2]
 8000402:	78fa      	ldrb	r2, [r7, #3]
 8000404:	0092      	lsls	r2, r2, #2
 8000406:	fa01 f202 	lsl.w	r2, r1, r2
 800040a:	431a      	orrs	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	e00a      	b.n	8000428 <GPIO_Pin_Setup+0x74>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	78b9      	ldrb	r1, [r7, #2]
 8000418:	78fa      	ldrb	r2, [r7, #3]
 800041a:	3a08      	subs	r2, #8
 800041c:	0092      	lsls	r2, r2, #2
 800041e:	fa01 f202 	lsl.w	r2, r1, r2
 8000422:	431a      	orrs	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	605a      	str	r2, [r3, #4]
		}
	}


	if(Port == GPIOB)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a36      	ldr	r2, [pc, #216]	@ (8000504 <GPIO_Pin_Setup+0x150>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d12d      	bne.n	800048c <GPIO_Pin_Setup+0xd8>
	{
		if((function == GPIO_Config.ALT_OPEN_DRAIN_OUTPUT) || (function == GPIO_Config.ALT_PUSH_PULL_OUTPUT))
 8000430:	220f      	movs	r2, #15
 8000432:	78bb      	ldrb	r3, [r7, #2]
 8000434:	4293      	cmp	r3, r2
 8000436:	d003      	beq.n	8000440 <GPIO_Pin_Setup+0x8c>
 8000438:	220b      	movs	r2, #11
 800043a:	78bb      	ldrb	r3, [r7, #2]
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_Pin_Setup+0x9a>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 8000440:	4b2f      	ldr	r3, [pc, #188]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a2e      	ldr	r2, [pc, #184]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 8000446:	f043 0309 	orr.w	r3, r3, #9
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	e005      	b.n	800045a <GPIO_Pin_Setup+0xa6>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800044e:	4b2c      	ldr	r3, [pc, #176]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a2b      	ldr	r2, [pc, #172]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 8000454:	f043 0308 	orr.w	r3, r3, #8
 8000458:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 800045a:	78fb      	ldrb	r3, [r7, #3]
 800045c:	2b07      	cmp	r3, #7
 800045e:	d80a      	bhi.n	8000476 <GPIO_Pin_Setup+0xc2>
		{
			Port -> CRL |= function << (4*pin);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	78b9      	ldrb	r1, [r7, #2]
 8000466:	78fa      	ldrb	r2, [r7, #3]
 8000468:	0092      	lsls	r2, r2, #2
 800046a:	fa01 f202 	lsl.w	r2, r1, r2
 800046e:	431a      	orrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	e00a      	b.n	800048c <GPIO_Pin_Setup+0xd8>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	78b9      	ldrb	r1, [r7, #2]
 800047c:	78fa      	ldrb	r2, [r7, #3]
 800047e:	3a08      	subs	r2, #8
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	fa01 f202 	lsl.w	r2, r1, r2
 8000486:	431a      	orrs	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	605a      	str	r2, [r3, #4]
		}
	}

	if(Port == GPIOC)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a1e      	ldr	r2, [pc, #120]	@ (8000508 <GPIO_Pin_Setup+0x154>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d12d      	bne.n	80004f0 <GPIO_Pin_Setup+0x13c>
	{
		if((function == GPIO_Config.ALT_OPEN_DRAIN_OUTPUT) || (function == GPIO_Config.ALT_PUSH_PULL_OUTPUT))
 8000494:	220f      	movs	r2, #15
 8000496:	78bb      	ldrb	r3, [r7, #2]
 8000498:	4293      	cmp	r3, r2
 800049a:	d003      	beq.n	80004a4 <GPIO_Pin_Setup+0xf0>
 800049c:	220b      	movs	r2, #11
 800049e:	78bb      	ldrb	r3, [r7, #2]
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_Pin_Setup+0xfe>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 80004a4:	4b16      	ldr	r3, [pc, #88]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a15      	ldr	r2, [pc, #84]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 80004aa:	f043 0311 	orr.w	r3, r3, #17
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	e005      	b.n	80004be <GPIO_Pin_Setup+0x10a>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a12      	ldr	r2, [pc, #72]	@ (8000500 <GPIO_Pin_Setup+0x14c>)
 80004b8:	f043 0310 	orr.w	r3, r3, #16
 80004bc:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 80004be:	78fb      	ldrb	r3, [r7, #3]
 80004c0:	2b07      	cmp	r3, #7
 80004c2:	d80a      	bhi.n	80004da <GPIO_Pin_Setup+0x126>
		{
			Port -> CRL |= function << (4*pin);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	78b9      	ldrb	r1, [r7, #2]
 80004ca:	78fa      	ldrb	r2, [r7, #3]
 80004cc:	0092      	lsls	r2, r2, #2
 80004ce:	fa01 f202 	lsl.w	r2, r1, r2
 80004d2:	431a      	orrs	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	601a      	str	r2, [r3, #0]
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
		}
	}
}
 80004d8:	e00a      	b.n	80004f0 <GPIO_Pin_Setup+0x13c>
			Port -> CRH |= function << (4*(pin - 8));
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	78b9      	ldrb	r1, [r7, #2]
 80004e0:	78fa      	ldrb	r2, [r7, #3]
 80004e2:	3a08      	subs	r2, #8
 80004e4:	0092      	lsls	r2, r2, #2
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	431a      	orrs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	605a      	str	r2, [r3, #4]
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40010800 	.word	0x40010800
 8000500:	40021000 	.word	0x40021000
 8000504:	40010c00 	.word	0x40010c00
 8000508:	40011000 	.word	0x40011000

0800050c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051a:	2b00      	cmp	r3, #0
 800051c:	db0b      	blt.n	8000536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	f003 021f 	and.w	r2, r3, #31
 8000524:	4906      	ldr	r1, [pc, #24]	@ (8000540 <__NVIC_EnableIRQ+0x34>)
 8000526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052a:	095b      	lsrs	r3, r3, #5
 800052c:	2001      	movs	r0, #1
 800052e:	fa00 f202 	lsl.w	r2, r0, r2
 8000532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	e000e100 	.word	0xe000e100

08000544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	db0a      	blt.n	800056e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	490c      	ldr	r1, [pc, #48]	@ (8000590 <__NVIC_SetPriority+0x4c>)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	0112      	lsls	r2, r2, #4
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	440b      	add	r3, r1
 8000568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800056c:	e00a      	b.n	8000584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4908      	ldr	r1, [pc, #32]	@ (8000594 <__NVIC_SetPriority+0x50>)
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f003 030f 	and.w	r3, r3, #15
 800057a:	3b04      	subs	r3, #4
 800057c:	0112      	lsls	r2, r2, #4
 800057e:	b2d2      	uxtb	r2, r2
 8000580:	440b      	add	r3, r1
 8000582:	761a      	strb	r2, [r3, #24]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000e100 	.word	0xe000e100
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005a8:	d301      	bcc.n	80005ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005aa:	2301      	movs	r3, #1
 80005ac:	e00f      	b.n	80005ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ae:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <SysTick_Config+0x40>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005b6:	210f      	movs	r1, #15
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f7ff ffc2 	bl	8000544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <SysTick_Config+0x40>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005c6:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <SysTick_Config+0x40>)
 80005c8:	2207      	movs	r2, #7
 80005ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	e000e010 	.word	0xe000e010

080005dc <MCU_Clock_Setup>:
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}


__STATIC_INLINE void MCU_Clock_Setup()
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON ;
 80005e0:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <MCU_Clock_Setup+0x88>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000664 <MCU_Clock_Setup+0x88>)
 80005e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005ea:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 80005ec:	bf00      	nop
 80005ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <MCU_Clock_Setup+0x88>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0f9      	beq.n	80005ee <MCU_Clock_Setup+0x12>
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_1;
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <MCU_Clock_Setup+0x8c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000668 <MCU_Clock_Setup+0x8c>)
 8000600:	f043 0312 	orr.w	r3, r3, #18
 8000604:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE_HSE | RCC_CFGR_PLLMULL9 | RCC_CFGR_PPRE1_DIV2);
 8000606:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <MCU_Clock_Setup+0x88>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	4a16      	ldr	r2, [pc, #88]	@ (8000664 <MCU_Clock_Setup+0x88>)
 800060c:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8000610:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000614:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000616:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MCU_Clock_Setup+0x88>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <MCU_Clock_Setup+0x88>)
 800061c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000620:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000622:	bf00      	nop
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MCU_Clock_Setup+0x88>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0f9      	beq.n	8000624 <MCU_Clock_Setup+0x48>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MCU_Clock_Setup+0x88>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	4a0b      	ldr	r2, [pc, #44]	@ (8000664 <MCU_Clock_Setup+0x88>)
 8000636:	f043 0302 	orr.w	r3, r3, #2
 800063a:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 800063c:	bf00      	nop
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MCU_Clock_Setup+0x88>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0f9      	beq.n	800063e <MCU_Clock_Setup+0x62>
	SystemCoreClockUpdate();
 800064a:	f000 f85b 	bl	8000704 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/72);
 800064e:	4b07      	ldr	r3, [pc, #28]	@ (800066c <MCU_Clock_Setup+0x90>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a07      	ldr	r2, [pc, #28]	@ (8000670 <MCU_Clock_Setup+0x94>)
 8000654:	fba2 2303 	umull	r2, r3, r2, r3
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff9c 	bl	8000598 <SysTick_Config>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	40022000 	.word	0x40022000
 800066c:	20000000 	.word	0x20000000
 8000670:	38e38e39 	.word	0x38e38e39

08000674 <main>:
CAN_TX_Typedef SLAVE1_TX;
CAN_RX_Typedef SLAVE1_RX;
CAN_Filter_TypeDef SLAVE1_filter;

int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8000678:	f7ff ffb0 	bl	80005dc <MCU_Clock_Setup>

	SLAVE1.CAN_INSTANCE = CAN1;
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <main+0x74>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	@ (80006ec <main+0x78>)
 8000680:	601a      	str	r2, [r3, #0]
	SLAVE1.RX_Pin = CAN_Pin.RX.PA11;
 8000682:	2201      	movs	r2, #1
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <main+0x74>)
 8000686:	711a      	strb	r2, [r3, #4]
	SLAVE1.TX_Pin = CAN_Pin.TX.PA12;
 8000688:	2203      	movs	r2, #3
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <main+0x74>)
 800068c:	715a      	strb	r2, [r3, #5]
	SLAVE1.Baudrate = CAN_Baudrate.CAN_BAUDRATE_1000_KBPS;
 800068e:	4a18      	ldr	r2, [pc, #96]	@ (80006f0 <main+0x7c>)
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <main+0x74>)
 8000692:	609a      	str	r2, [r3, #8]
	SLAVE1.interrupt = CAN_Interrupt.Fifo0_Message_Pending;
 8000694:	2302      	movs	r3, #2
 8000696:	461a      	mov	r2, r3
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <main+0x74>)
 800069a:	611a      	str	r2, [r3, #16]
	CAN_Init(&SLAVE1);
 800069c:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <main+0x74>)
 800069e:	f7ff fd67 	bl	8000170 <CAN_Init>

	SLAVE1_filter.ID = 0x00;
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <main+0x80>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
	SLAVE1_filter.filter_id = 0;
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <main+0x80>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
	SLAVE1_filter.id_type = CAN_ID.Standard;
 80006ae:	2301      	movs	r3, #1
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <main+0x80>)
 80006b4:	609a      	str	r2, [r3, #8]
	SLAVE1_filter.frame_type = CAN_Frame.Data_Frame;
 80006b6:	2300      	movs	r3, #0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <main+0x80>)
 80006bc:	60da      	str	r2, [r3, #12]
	CAN_Filter_Init(&SLAVE1, &SLAVE1_filter);
 80006be:	490d      	ldr	r1, [pc, #52]	@ (80006f4 <main+0x80>)
 80006c0:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <main+0x74>)
 80006c2:	f7ff fdbd 	bl	8000240 <CAN_Filter_Init>
	CAN_Start(&SLAVE1);
 80006c6:	4808      	ldr	r0, [pc, #32]	@ (80006e8 <main+0x74>)
 80006c8:	f7ff fe4a 	bl	8000360 <CAN_Start>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop

	__disable_irq();
	NVIC_SetPriority(CAN1_RX0_IRQn,0);
 80006d0:	2100      	movs	r1, #0
 80006d2:	2014      	movs	r0, #20
 80006d4:	f7ff ff36 	bl	8000544 <__NVIC_SetPriority>
	NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006d8:	2015      	movs	r0, #21
 80006da:	f7ff ff17 	bl	800050c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80006de:	b662      	cpsie	i
}
 80006e0:	bf00      	nop
	__enable_irq();




	for(;;);
 80006e2:	bf00      	nop
 80006e4:	e7fd      	b.n	80006e2 <main+0x6e>
 80006e6:	bf00      	nop
 80006e8:	20000020 	.word	0x20000020
 80006ec:	40006400 	.word	0x40006400
 80006f0:	001e0001 	.word	0x001e0001
 80006f4:	20000034 	.word	0x20000034

080006f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000716:	4b2f      	ldr	r3, [pc, #188]	@ (80007d4 <SystemCoreClockUpdate+0xd0>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f003 030c 	and.w	r3, r3, #12
 800071e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2b08      	cmp	r3, #8
 8000724:	d011      	beq.n	800074a <SystemCoreClockUpdate+0x46>
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2b08      	cmp	r3, #8
 800072a:	d83a      	bhi.n	80007a2 <SystemCoreClockUpdate+0x9e>
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d003      	beq.n	800073a <SystemCoreClockUpdate+0x36>
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2b04      	cmp	r3, #4
 8000736:	d004      	beq.n	8000742 <SystemCoreClockUpdate+0x3e>
 8000738:	e033      	b.n	80007a2 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800073a:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <SystemCoreClockUpdate+0xd4>)
 800073c:	4a27      	ldr	r2, [pc, #156]	@ (80007dc <SystemCoreClockUpdate+0xd8>)
 800073e:	601a      	str	r2, [r3, #0]
      break;
 8000740:	e033      	b.n	80007aa <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000742:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <SystemCoreClockUpdate+0xd4>)
 8000744:	4a25      	ldr	r2, [pc, #148]	@ (80007dc <SystemCoreClockUpdate+0xd8>)
 8000746:	601a      	str	r2, [r3, #0]
      break;
 8000748:	e02f      	b.n	80007aa <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800074a:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <SystemCoreClockUpdate+0xd0>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000752:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <SystemCoreClockUpdate+0xd0>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800075c:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	0c9b      	lsrs	r3, r3, #18
 8000762:	3302      	adds	r3, #2
 8000764:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d106      	bne.n	800077a <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4a1c      	ldr	r2, [pc, #112]	@ (80007e0 <SystemCoreClockUpdate+0xdc>)
 8000770:	fb02 f303 	mul.w	r3, r2, r3
 8000774:	4a18      	ldr	r2, [pc, #96]	@ (80007d8 <SystemCoreClockUpdate+0xd4>)
 8000776:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000778:	e017      	b.n	80007aa <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800077a:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <SystemCoreClockUpdate+0xd0>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d006      	beq.n	8000794 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	4a15      	ldr	r2, [pc, #84]	@ (80007e0 <SystemCoreClockUpdate+0xdc>)
 800078a:	fb02 f303 	mul.w	r3, r2, r3
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <SystemCoreClockUpdate+0xd4>)
 8000790:	6013      	str	r3, [r2, #0]
      break;
 8000792:	e00a      	b.n	80007aa <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4a11      	ldr	r2, [pc, #68]	@ (80007dc <SystemCoreClockUpdate+0xd8>)
 8000798:	fb02 f303 	mul.w	r3, r2, r3
 800079c:	4a0e      	ldr	r2, [pc, #56]	@ (80007d8 <SystemCoreClockUpdate+0xd4>)
 800079e:	6013      	str	r3, [r2, #0]
      break;
 80007a0:	e003      	b.n	80007aa <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <SystemCoreClockUpdate+0xd4>)
 80007a4:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <SystemCoreClockUpdate+0xd8>)
 80007a6:	601a      	str	r2, [r3, #0]
      break;
 80007a8:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <SystemCoreClockUpdate+0xd0>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	091b      	lsrs	r3, r3, #4
 80007b0:	f003 030f 	and.w	r3, r3, #15
 80007b4:	4a0b      	ldr	r2, [pc, #44]	@ (80007e4 <SystemCoreClockUpdate+0xe0>)
 80007b6:	5cd3      	ldrb	r3, [r2, r3]
 80007b8:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80007ba:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <SystemCoreClockUpdate+0xd4>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	fa22 f303 	lsr.w	r3, r2, r3
 80007c4:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <SystemCoreClockUpdate+0xd4>)
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000
 80007d8:	20000000 	.word	0x20000000
 80007dc:	007a1200 	.word	0x007a1200
 80007e0:	003d0900 	.word	0x003d0900
 80007e4:	0800089c 	.word	0x0800089c

080007e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e8:	480d      	ldr	r0, [pc, #52]	@ (8000820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ec:	f7ff ff84 	bl	80006f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	@ (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	@ (8000834 <LoopForever+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000816:	f000 f811 	bl	800083c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff ff2b 	bl	8000674 <main>

0800081e <LoopForever>:

LoopForever:
  b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   r0, =_estack
 8000820:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800082c:	080008b4 	.word	0x080008b4
  ldr r2, =_sbss
 8000830:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000834:	20000054 	.word	0x20000054

08000838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_2_IRQHandler>
	...

0800083c <__libc_init_array>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	2600      	movs	r6, #0
 8000840:	4d0c      	ldr	r5, [pc, #48]	@ (8000874 <__libc_init_array+0x38>)
 8000842:	4c0d      	ldr	r4, [pc, #52]	@ (8000878 <__libc_init_array+0x3c>)
 8000844:	1b64      	subs	r4, r4, r5
 8000846:	10a4      	asrs	r4, r4, #2
 8000848:	42a6      	cmp	r6, r4
 800084a:	d109      	bne.n	8000860 <__libc_init_array+0x24>
 800084c:	f000 f81a 	bl	8000884 <_init>
 8000850:	2600      	movs	r6, #0
 8000852:	4d0a      	ldr	r5, [pc, #40]	@ (800087c <__libc_init_array+0x40>)
 8000854:	4c0a      	ldr	r4, [pc, #40]	@ (8000880 <__libc_init_array+0x44>)
 8000856:	1b64      	subs	r4, r4, r5
 8000858:	10a4      	asrs	r4, r4, #2
 800085a:	42a6      	cmp	r6, r4
 800085c:	d105      	bne.n	800086a <__libc_init_array+0x2e>
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f855 3b04 	ldr.w	r3, [r5], #4
 8000864:	4798      	blx	r3
 8000866:	3601      	adds	r6, #1
 8000868:	e7ee      	b.n	8000848 <__libc_init_array+0xc>
 800086a:	f855 3b04 	ldr.w	r3, [r5], #4
 800086e:	4798      	blx	r3
 8000870:	3601      	adds	r6, #1
 8000872:	e7f2      	b.n	800085a <__libc_init_array+0x1e>
 8000874:	080008ac 	.word	0x080008ac
 8000878:	080008ac 	.word	0x080008ac
 800087c:	080008ac 	.word	0x080008ac
 8000880:	080008b0 	.word	0x080008b0

08000884 <_init>:
 8000884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000886:	bf00      	nop
 8000888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800088a:	bc08      	pop	{r3}
 800088c:	469e      	mov	lr, r3
 800088e:	4770      	bx	lr

08000890 <_fini>:
 8000890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000892:	bf00      	nop
 8000894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000896:	bc08      	pop	{r3}
 8000898:	469e      	mov	lr, r3
 800089a:	4770      	bx	lr
