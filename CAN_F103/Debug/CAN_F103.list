
CAN_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000930  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000a60  08000a60  00001a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a70  08000a70  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000a70  08000a70  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a70  08000a70  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a70  08000a70  00001a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a74  08000a74  00001a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000a78  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000004  08000a7c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000a7c  00002068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000241e  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000085f  00000000  00000000  0000444b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00004cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000c8  00000000  00000000  00004dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001176b  00000000  00000000  00004e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000234a  00000000  00000000  00016603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059298  00000000  00000000  0001894d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00071be5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000328  00000000  00000000  00071c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00071f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a48 	.word	0x08000a48

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000a48 	.word	0x08000a48

08000170 <CAN_Init>:
 * @operation		:	Configures the CAN controller as per the CAN_Config struct.
 *                      Take a look at the examples and the CAN_Config structure for
 *                      more information
 */
int CAN_Init(CAN_Config *config)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    RCC -> APB1ENR &= ~RCC_APB1ENR_CAN1EN;
 8000178:	4b5a      	ldr	r3, [pc, #360]	@ (80002e4 <CAN_Init+0x174>)
 800017a:	69db      	ldr	r3, [r3, #28]
 800017c:	4a59      	ldr	r2, [pc, #356]	@ (80002e4 <CAN_Init+0x174>)
 800017e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000182:	61d3      	str	r3, [r2, #28]

    if(config->RX_Pin == CAN_Pin.RX.PA11) GPIO_Pin_Setup(GPIOA, 11, GPIO_Config.INPUT_MODE);
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	791b      	ldrb	r3, [r3, #4]
 8000188:	2201      	movs	r2, #1
 800018a:	4293      	cmp	r3, r2
 800018c:	d106      	bne.n	800019c <CAN_Init+0x2c>
 800018e:	2304      	movs	r3, #4
 8000190:	461a      	mov	r2, r3
 8000192:	210b      	movs	r1, #11
 8000194:	4854      	ldr	r0, [pc, #336]	@ (80002e8 <CAN_Init+0x178>)
 8000196:	f000 f98d 	bl	80004b4 <GPIO_Pin_Setup>
 800019a:	e00a      	b.n	80001b2 <CAN_Init+0x42>
    else if(config->RX_Pin == CAN_Pin.RX.PB8) GPIO_Pin_Setup(GPIOB, 8, GPIO_Config.INPUT_MODE);
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	791b      	ldrb	r3, [r3, #4]
 80001a0:	2202      	movs	r2, #2
 80001a2:	4293      	cmp	r3, r2
 80001a4:	d105      	bne.n	80001b2 <CAN_Init+0x42>
 80001a6:	2304      	movs	r3, #4
 80001a8:	461a      	mov	r2, r3
 80001aa:	2108      	movs	r1, #8
 80001ac:	484f      	ldr	r0, [pc, #316]	@ (80002ec <CAN_Init+0x17c>)
 80001ae:	f000 f981 	bl	80004b4 <GPIO_Pin_Setup>

    if(config->TX_Pin == CAN_Pin.TX.PA12) GPIO_Pin_Setup(GPIOA, 12, GPIO_Config.ALT_PUSH_PULL_OUTPUT);
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	795b      	ldrb	r3, [r3, #5]
 80001b6:	2203      	movs	r2, #3
 80001b8:	4293      	cmp	r3, r2
 80001ba:	d106      	bne.n	80001ca <CAN_Init+0x5a>
 80001bc:	230b      	movs	r3, #11
 80001be:	461a      	mov	r2, r3
 80001c0:	210c      	movs	r1, #12
 80001c2:	4849      	ldr	r0, [pc, #292]	@ (80002e8 <CAN_Init+0x178>)
 80001c4:	f000 f976 	bl	80004b4 <GPIO_Pin_Setup>
 80001c8:	e00a      	b.n	80001e0 <CAN_Init+0x70>
    else if(config->TX_Pin == CAN_Pin.TX.PB9) GPIO_Pin_Setup(GPIOB, 9, GPIO_Config.ALT_PUSH_PULL_OUTPUT);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	795b      	ldrb	r3, [r3, #5]
 80001ce:	2204      	movs	r2, #4
 80001d0:	4293      	cmp	r3, r2
 80001d2:	d105      	bne.n	80001e0 <CAN_Init+0x70>
 80001d4:	230b      	movs	r3, #11
 80001d6:	461a      	mov	r2, r3
 80001d8:	2109      	movs	r1, #9
 80001da:	4844      	ldr	r0, [pc, #272]	@ (80002ec <CAN_Init+0x17c>)
 80001dc:	f000 f96a 	bl	80004b4 <GPIO_Pin_Setup>

//    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
//    GPIOA -> CRH |= GPIO_CRH_CNF12_1 | GPIO_CRH_MODE12;
//    GPIOA -> CRH &= ~GPIO_CRH_CNF12_0;

    RCC -> APB1ENR |= RCC_APB1ENR_CAN1EN;
 80001e0:	4b40      	ldr	r3, [pc, #256]	@ (80002e4 <CAN_Init+0x174>)
 80001e2:	69db      	ldr	r3, [r3, #28]
 80001e4:	4a3f      	ldr	r2, [pc, #252]	@ (80002e4 <CAN_Init+0x174>)
 80001e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001ea:	61d3      	str	r3, [r2, #28]
    config -> CAN_INSTANCE -> MCR |=   CAN_MCR_RESET | CAN_MCR_SLEEP;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	687a      	ldr	r2, [r7, #4]
 80001f4:	6812      	ldr	r2, [r2, #0]
 80001f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80001fa:	f043 0302 	orr.w	r3, r3, #2
 80001fe:	6013      	str	r3, [r2, #0]
    while(!(config -> CAN_INSTANCE  -> MSR & CAN_MSR_SLAK)){}
 8000200:	bf00      	nop
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	f003 0302 	and.w	r3, r3, #2
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0f8      	beq.n	8000202 <CAN_Init+0x92>
    config -> CAN_INSTANCE -> MCR &= ~CAN_MCR_SLEEP;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f022 0202 	bic.w	r2, r2, #2
 800021e:	601a      	str	r2, [r3, #0]
    config -> CAN_INSTANCE -> MCR |= CAN_MCR_INRQ;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f042 0201 	orr.w	r2, r2, #1
 800022e:	601a      	str	r2, [r3, #0]
	while((config -> CAN_INSTANCE -> MSR & CAN_MSR_SLAK)){}
 8000230:	bf00      	nop
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	f003 0302 	and.w	r3, r3, #2
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1f8      	bne.n	8000232 <CAN_Init+0xc2>
	while(!(config -> CAN_INSTANCE-> MSR & CAN_MSR_INAK)){}
 8000240:	bf00      	nop
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d0f8      	beq.n	8000242 <CAN_Init+0xd2>


//	config -> CAN_INSTANCE -> MCR	|= CAN_MCR_INRQ;
//	config -> CAN_INSTANCE -> MCR |= CAN_MCR_NART;
//	config -> CAN_INSTANCE -> IER |= config -> interrupt;
	config -> CAN_INSTANCE -> BTR = config -> Baudrate;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	6892      	ldr	r2, [r2, #8]
 8000258:	61da      	str	r2, [r3, #28]

	config -> CAN_INSTANCE -> FMR |= CAN_FMR_FINIT;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f042 0201 	orr.w	r2, r2, #1
 800026a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	config -> CAN_INSTANCE -> FMR &= 0xFFFFC0FF;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800027e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	config -> CAN_INSTANCE -> FMR |= 0x1C << 8;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8000292:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	config -> CAN_INSTANCE -> FMR &= ~CAN_FMR_FINIT;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f022 0201 	bic.w	r2, r2, #1
 80002a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	config -> CAN_INSTANCE->MCR &= ~CAN_MCR_INRQ;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f022 0201 	bic.w	r2, r2, #1
 80002b8:	601a      	str	r2, [r3, #0]
	config -> CAN_INSTANCE->MCR &= ~CAN_MCR_INRQ;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f022 0201 	bic.w	r2, r2, #1
 80002c8:	601a      	str	r2, [r3, #0]
    while((config -> CAN_INSTANCE->MSR & CAN_MSR_INAK)){}
 80002ca:	bf00      	nop
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f8      	bne.n	80002cc <CAN_Init+0x15c>
	return 1;
 80002da:	2301      	movs	r3, #1
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40010800 	.word	0x40010800
 80002ec:	40010c00 	.word	0x40010c00

080002f0 <CAN_Start>:
	}
	return 1;
}

void CAN_Start(CAN_Config *config)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	config -> CAN_INSTANCE -> MCR &= ~CAN_MCR_SLEEP;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f022 0202 	bic.w	r2, r2, #2
 8000306:	601a      	str	r2, [r3, #0]
	while((config -> CAN_INSTANCE -> MSR & CAN_MSR_SLAK)){}
 8000308:	bf00      	nop
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	f003 0302 	and.w	r3, r3, #2
 8000314:	2b00      	cmp	r3, #0
 8000316:	d1f8      	bne.n	800030a <CAN_Start+0x1a>
	config -> CAN_INSTANCE -> MCR &= ~CAN_MCR_INRQ;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f022 0201 	bic.w	r2, r2, #1
 8000326:	601a      	str	r2, [r3, #0]
	while((config -> CAN_INSTANCE ->MSR & CAN_MSR_INAK));
 8000328:	bf00      	nop
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1f8      	bne.n	800032a <CAN_Start+0x3a>
}
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <CAN_Send_Packet>:

void CAN_Send_Packet(CAN_Config *config, CAN_TX_Typedef *tx)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
	config -> CAN_INSTANCE -> sTxMailBox[0].TDHR &= ~0xFFFFFFFF;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
	config -> CAN_INSTANCE -> sTxMailBox[0].TDLR &= ~0xFFFFFFFF;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2200      	movs	r2, #0
 800036e:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
	config -> CAN_INSTANCE -> sTxMailBox[0].TDTR &= ~0xFFFFFFFF;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2200      	movs	r2, #0
 8000380:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
	config -> CAN_INSTANCE -> sTxMailBox[0].TIR  &= ~0xFFFFFFFF;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2200      	movs	r2, #0
 8000392:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
//---------------------------------------------------------------------------------------------------------------------

	if(tx->id_type == CAN_ID.Standard)
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2201      	movs	r2, #1
 800039c:	4293      	cmp	r3, r2
 800039e:	d111      	bne.n	80003c4 <CAN_Send_Packet+0x80>
	{
		config -> CAN_INSTANCE -> sTxMailBox[0].TIR  = tx->ID << 21;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	055a      	lsls	r2, r3, #21
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
		config -> CAN_INSTANCE -> sTxMailBox[0].TIR  &= ~1 << 2;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f022 0207 	bic.w	r2, r2, #7
 80003be:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 80003c2:	e015      	b.n	80003f0 <CAN_Send_Packet+0xac>
	}
	else if(tx->id_type == CAN_ID.Extended)
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2202      	movs	r2, #2
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d110      	bne.n	80003f0 <CAN_Send_Packet+0xac>
	{
		config -> CAN_INSTANCE -> sTxMailBox[0].TIR  = tx->ID << 3;
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	68db      	ldr	r3, [r3, #12]
 80003d2:	00da      	lsls	r2, r3, #3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
		config -> CAN_INSTANCE -> sTxMailBox[0].TIR  |= 1 << 2;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f042 0204 	orr.w	r2, r2, #4
 80003ec:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	}

//---------------------------------------------------------------------------------------------------------------------
	if(tx->frame_type == CAN_Frame.Data_Frame)
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	2200      	movs	r2, #0
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d109      	bne.n	800040e <CAN_Send_Packet+0xca>
	{
		config -> CAN_INSTANCE -> sTxMailBox[0].TIR  &= ~(1 << 1);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f022 0202 	bic.w	r2, r2, #2
 800040a:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	}
	if(tx->frame_type == CAN_Frame.Remote_Frame)
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	220a      	movs	r2, #10
 8000414:	4293      	cmp	r3, r2
 8000416:	d109      	bne.n	800042c <CAN_Send_Packet+0xe8>
	{
		config -> CAN_INSTANCE -> sTxMailBox[0].TIR  |= (1 << 1);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f042 0202 	orr.w	r2, r2, #2
 8000428:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	}
//---------------------------------------------------------------------------------------------------------------------
	config -> CAN_INSTANCE -> sTxMailBox[0].TDTR = tx->data_length;
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	691a      	ldr	r2, [r3, #16]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
	config -> CAN_INSTANCE -> sTxMailBox[0].TDTR &= ~CAN_TDT0R_TGT;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000448:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
	config -> CAN_INSTANCE -> sTxMailBox[0].TDHR = tx->data[7] << 24 | tx->data[6] << 16 | tx->data[5] << 8 | tx->data[4] << 0;
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000450:	061a      	lsls	r2, r3, #24
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000456:	041b      	lsls	r3, r3, #16
 8000458:	431a      	orrs	r2, r3
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800045e:	021b      	lsls	r3, r3, #8
 8000460:	431a      	orrs	r2, r3
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000466:	431a      	orrs	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
	config -> CAN_INSTANCE -> sTxMailBox[0].TDLR = tx->data[3] << 24 | tx->data[2] << 16 | tx->data[1] << 8 | tx->data[0] << 0;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	6a1b      	ldr	r3, [r3, #32]
 8000474:	061a      	lsls	r2, r3, #24
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	041b      	lsls	r3, r3, #16
 800047c:	431a      	orrs	r2, r3
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	021b      	lsls	r3, r3, #8
 8000484:	431a      	orrs	r2, r3
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
	config -> CAN_INSTANCE -> sTxMailBox[0].TIR  |= (1 << 0);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f042 0201 	orr.w	r2, r2, #1
 80004a4:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
//	while(config -> CAN_INSTANCE -> sTxMailBox[0].TIR & (1 << 0)){}

}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
	...

080004b4 <GPIO_Pin_Setup>:
#include "GPIO.h"



void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]
 80004c0:	4613      	mov	r3, r2
 80004c2:	70bb      	strb	r3, [r7, #2]
	if(Port == GPIOA)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a4d      	ldr	r2, [pc, #308]	@ (80005fc <GPIO_Pin_Setup+0x148>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d12d      	bne.n	8000528 <GPIO_Pin_Setup+0x74>
	{
		if((function == GPIO_Config.ALT_OPEN_DRAIN_OUTPUT) || (function == GPIO_Config.ALT_PUSH_PULL_OUTPUT))
 80004cc:	220f      	movs	r2, #15
 80004ce:	78bb      	ldrb	r3, [r7, #2]
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d003      	beq.n	80004dc <GPIO_Pin_Setup+0x28>
 80004d4:	220b      	movs	r2, #11
 80004d6:	78bb      	ldrb	r3, [r7, #2]
 80004d8:	4293      	cmp	r3, r2
 80004da:	d106      	bne.n	80004ea <GPIO_Pin_Setup+0x36>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 80004dc:	4b48      	ldr	r3, [pc, #288]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a47      	ldr	r2, [pc, #284]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 80004e2:	f043 0305 	orr.w	r3, r3, #5
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	e005      	b.n	80004f6 <GPIO_Pin_Setup+0x42>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80004ea:	4b45      	ldr	r3, [pc, #276]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a44      	ldr	r2, [pc, #272]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 80004f6:	78fb      	ldrb	r3, [r7, #3]
 80004f8:	2b07      	cmp	r3, #7
 80004fa:	d80a      	bhi.n	8000512 <GPIO_Pin_Setup+0x5e>
		{
			Port -> CRL |= function << (4*pin);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	78b9      	ldrb	r1, [r7, #2]
 8000502:	78fa      	ldrb	r2, [r7, #3]
 8000504:	0092      	lsls	r2, r2, #2
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	431a      	orrs	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	e00a      	b.n	8000528 <GPIO_Pin_Setup+0x74>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	78b9      	ldrb	r1, [r7, #2]
 8000518:	78fa      	ldrb	r2, [r7, #3]
 800051a:	3a08      	subs	r2, #8
 800051c:	0092      	lsls	r2, r2, #2
 800051e:	fa01 f202 	lsl.w	r2, r1, r2
 8000522:	431a      	orrs	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	605a      	str	r2, [r3, #4]
		}
	}


	if(Port == GPIOB)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a36      	ldr	r2, [pc, #216]	@ (8000604 <GPIO_Pin_Setup+0x150>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d12d      	bne.n	800058c <GPIO_Pin_Setup+0xd8>
	{
		if((function == GPIO_Config.ALT_OPEN_DRAIN_OUTPUT) || (function == GPIO_Config.ALT_PUSH_PULL_OUTPUT))
 8000530:	220f      	movs	r2, #15
 8000532:	78bb      	ldrb	r3, [r7, #2]
 8000534:	4293      	cmp	r3, r2
 8000536:	d003      	beq.n	8000540 <GPIO_Pin_Setup+0x8c>
 8000538:	220b      	movs	r2, #11
 800053a:	78bb      	ldrb	r3, [r7, #2]
 800053c:	4293      	cmp	r3, r2
 800053e:	d106      	bne.n	800054e <GPIO_Pin_Setup+0x9a>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 8000540:	4b2f      	ldr	r3, [pc, #188]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a2e      	ldr	r2, [pc, #184]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 8000546:	f043 0309 	orr.w	r3, r3, #9
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	e005      	b.n	800055a <GPIO_Pin_Setup+0xa6>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800054e:	4b2c      	ldr	r3, [pc, #176]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a2b      	ldr	r2, [pc, #172]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 8000554:	f043 0308 	orr.w	r3, r3, #8
 8000558:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 800055a:	78fb      	ldrb	r3, [r7, #3]
 800055c:	2b07      	cmp	r3, #7
 800055e:	d80a      	bhi.n	8000576 <GPIO_Pin_Setup+0xc2>
		{
			Port -> CRL |= function << (4*pin);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	78b9      	ldrb	r1, [r7, #2]
 8000566:	78fa      	ldrb	r2, [r7, #3]
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	431a      	orrs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	e00a      	b.n	800058c <GPIO_Pin_Setup+0xd8>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	78b9      	ldrb	r1, [r7, #2]
 800057c:	78fa      	ldrb	r2, [r7, #3]
 800057e:	3a08      	subs	r2, #8
 8000580:	0092      	lsls	r2, r2, #2
 8000582:	fa01 f202 	lsl.w	r2, r1, r2
 8000586:	431a      	orrs	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	605a      	str	r2, [r3, #4]
		}
	}

	if(Port == GPIOC)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a1e      	ldr	r2, [pc, #120]	@ (8000608 <GPIO_Pin_Setup+0x154>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d12d      	bne.n	80005f0 <GPIO_Pin_Setup+0x13c>
	{
		if((function == GPIO_Config.ALT_OPEN_DRAIN_OUTPUT) || (function == GPIO_Config.ALT_PUSH_PULL_OUTPUT))
 8000594:	220f      	movs	r2, #15
 8000596:	78bb      	ldrb	r3, [r7, #2]
 8000598:	4293      	cmp	r3, r2
 800059a:	d003      	beq.n	80005a4 <GPIO_Pin_Setup+0xf0>
 800059c:	220b      	movs	r2, #11
 800059e:	78bb      	ldrb	r3, [r7, #2]
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d106      	bne.n	80005b2 <GPIO_Pin_Setup+0xfe>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 80005a4:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a15      	ldr	r2, [pc, #84]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 80005aa:	f043 0311 	orr.w	r3, r3, #17
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	e005      	b.n	80005be <GPIO_Pin_Setup+0x10a>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a12      	ldr	r2, [pc, #72]	@ (8000600 <GPIO_Pin_Setup+0x14c>)
 80005b8:	f043 0310 	orr.w	r3, r3, #16
 80005bc:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 80005be:	78fb      	ldrb	r3, [r7, #3]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d80a      	bhi.n	80005da <GPIO_Pin_Setup+0x126>
		{
			Port -> CRL |= function << (4*pin);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	78b9      	ldrb	r1, [r7, #2]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	fa01 f202 	lsl.w	r2, r1, r2
 80005d2:	431a      	orrs	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	601a      	str	r2, [r3, #0]
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
		}
	}
}
 80005d8:	e00a      	b.n	80005f0 <GPIO_Pin_Setup+0x13c>
			Port -> CRH |= function << (4*(pin - 8));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	78b9      	ldrb	r1, [r7, #2]
 80005e0:	78fa      	ldrb	r2, [r7, #3]
 80005e2:	3a08      	subs	r2, #8
 80005e4:	0092      	lsls	r2, r2, #2
 80005e6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ea:	431a      	orrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	605a      	str	r2, [r3, #4]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40010800 	.word	0x40010800
 8000600:	40021000 	.word	0x40021000
 8000604:	40010c00 	.word	0x40010c00
 8000608:	40011000 	.word	0x40011000

0800060c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	db0b      	blt.n	8000636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f003 021f 	and.w	r2, r3, #31
 8000624:	4906      	ldr	r1, [pc, #24]	@ (8000640 <__NVIC_EnableIRQ+0x34>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	095b      	lsrs	r3, r3, #5
 800062c:	2001      	movs	r0, #1
 800062e:	fa00 f202 	lsl.w	r2, r0, r2
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100

08000644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	db0a      	blt.n	800066e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	b2da      	uxtb	r2, r3
 800065c:	490c      	ldr	r1, [pc, #48]	@ (8000690 <__NVIC_SetPriority+0x4c>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	0112      	lsls	r2, r2, #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	440b      	add	r3, r1
 8000668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800066c:	e00a      	b.n	8000684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4908      	ldr	r1, [pc, #32]	@ (8000694 <__NVIC_SetPriority+0x50>)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	3b04      	subs	r3, #4
 800067c:	0112      	lsls	r2, r2, #4
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	440b      	add	r3, r1
 8000682:	761a      	strb	r2, [r3, #24]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006a8:	d301      	bcc.n	80006ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00f      	b.n	80006ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ae:	4a0a      	ldr	r2, [pc, #40]	@ (80006d8 <SysTick_Config+0x40>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006b6:	210f      	movs	r1, #15
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295
 80006bc:	f7ff ffc2 	bl	8000644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <SysTick_Config+0x40>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c6:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <SysTick_Config+0x40>)
 80006c8:	2207      	movs	r2, #7
 80006ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	e000e010 	.word	0xe000e010

080006dc <MCU_Clock_Setup>:
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}


__STATIC_INLINE void MCU_Clock_Setup()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON ;
 80006e0:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <MCU_Clock_Setup+0x88>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000764 <MCU_Clock_Setup+0x88>)
 80006e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006ea:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 80006ec:	bf00      	nop
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <MCU_Clock_Setup+0x88>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0f9      	beq.n	80006ee <MCU_Clock_Setup+0x12>
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_1;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MCU_Clock_Setup+0x8c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000768 <MCU_Clock_Setup+0x8c>)
 8000700:	f043 0312 	orr.w	r3, r3, #18
 8000704:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE_HSE | RCC_CFGR_PLLMULL9 | RCC_CFGR_PPRE1_DIV2);
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MCU_Clock_Setup+0x88>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	4a16      	ldr	r2, [pc, #88]	@ (8000764 <MCU_Clock_Setup+0x88>)
 800070c:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8000710:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000714:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000716:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <MCU_Clock_Setup+0x88>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <MCU_Clock_Setup+0x88>)
 800071c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000720:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000722:	bf00      	nop
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MCU_Clock_Setup+0x88>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0f9      	beq.n	8000724 <MCU_Clock_Setup+0x48>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MCU_Clock_Setup+0x88>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	4a0b      	ldr	r2, [pc, #44]	@ (8000764 <MCU_Clock_Setup+0x88>)
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 800073c:	bf00      	nop
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MCU_Clock_Setup+0x88>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0f9      	beq.n	800073e <MCU_Clock_Setup+0x62>
	SystemCoreClockUpdate();
 800074a:	f000 f8bd 	bl	80008c8 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/72);
 800074e:	4b07      	ldr	r3, [pc, #28]	@ (800076c <MCU_Clock_Setup+0x90>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <MCU_Clock_Setup+0x94>)
 8000754:	fba2 2303 	umull	r2, r3, r2, r3
 8000758:	091b      	lsrs	r3, r3, #4
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff9c 	bl	8000698 <SysTick_Config>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	40022000 	.word	0x40022000
 800076c:	20000000 	.word	0x20000000
 8000770:	38e38e39 	.word	0x38e38e39

08000774 <Delay_Config>:
    *integralPart = (double)((int64_t)number);
    *fractionalPart = number - *integralPart;
}

__STATIC_INLINE uint32_t Delay_Config(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <Delay_Config+0x30>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <Delay_Config+0x30>)
 8000780:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8000784:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <Delay_Config+0x30>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 5;
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <Delay_Config+0x30>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <Delay_Config+0x30>)
 8000792:	f043 0305 	orr.w	r3, r3, #5
 8000796:	6013      	str	r3, [r2, #0]
	return (0UL);                                                     /* Function successful */
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e010 	.word	0xe000e010

080007a8 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(unsigned long ms)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	unsigned long x = (SystemCoreClock / 1000) * (ms);
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <Delay_ms+0x44>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <Delay_ms+0x48>)
 80007b6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ba:	099a      	lsrs	r2, r3, #6
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = x ;
 80007c4:	4a0b      	ldr	r2, [pc, #44]	@ (80007f4 <Delay_ms+0x4c>)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <Delay_ms+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 80007d0:	bf00      	nop
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <Delay_ms+0x4c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f9      	beq.n	80007d2 <Delay_ms+0x2a>
	return (0UL);                                                     /* Function successful */
 80007de:	2300      	movs	r3, #0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000
 80007f0:	10624dd3 	.word	0x10624dd3
 80007f4:	e000e010 	.word	0xe000e010

080007f8 <main>:
void CAN1_RX0_IRQHandler(void);

bool flag = 0;

int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 80007fc:	f7ff ff6e 	bl	80006dc <MCU_Clock_Setup>
	Delay_Config();
 8000800:	f7ff ffb8 	bl	8000774 <Delay_Config>

	SLAVE1.CAN_INSTANCE = CAN1;
 8000804:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <main+0xb4>)
 8000806:	4a2a      	ldr	r2, [pc, #168]	@ (80008b0 <main+0xb8>)
 8000808:	601a      	str	r2, [r3, #0]
	SLAVE1.RX_Pin = CAN_Pin.RX.PA11;
 800080a:	2201      	movs	r2, #1
 800080c:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <main+0xb4>)
 800080e:	711a      	strb	r2, [r3, #4]
	SLAVE1.TX_Pin = CAN_Pin.TX.PA12;
 8000810:	2203      	movs	r2, #3
 8000812:	4b26      	ldr	r3, [pc, #152]	@ (80008ac <main+0xb4>)
 8000814:	715a      	strb	r2, [r3, #5]
	SLAVE1.Baudrate = CAN_Baudrate.CAN_BAUDRATE_1000_KBPS;
 8000816:	4a27      	ldr	r2, [pc, #156]	@ (80008b4 <main+0xbc>)
 8000818:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <main+0xb4>)
 800081a:	609a      	str	r2, [r3, #8]
	SLAVE1.interrupt = CAN_Interrupt.Fifo0_Message_Pending;
 800081c:	2302      	movs	r3, #2
 800081e:	461a      	mov	r2, r3
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <main+0xb4>)
 8000822:	611a      	str	r2, [r3, #16]
	CAN_Init(&SLAVE1);
 8000824:	4821      	ldr	r0, [pc, #132]	@ (80008ac <main+0xb4>)
 8000826:	f7ff fca3 	bl	8000170 <CAN_Init>
//	SLAVE1_filter.ID = 0x00;
//	SLAVE1_filter.filter_id = 0;
//	SLAVE1_filter.id_type = CAN_ID.Standard;
//	SLAVE1_filter.frame_type = CAN_Frame.Data_Frame;
//	CAN_Filter_Init(&SLAVE1, &SLAVE1_filter);
	CAN_Start(&SLAVE1);
 800082a:	4820      	ldr	r0, [pc, #128]	@ (80008ac <main+0xb4>)
 800082c:	f7ff fd60 	bl	80002f0 <CAN_Start>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop

	__disable_irq();
	NVIC_SetPriority(CAN1_RX0_IRQn,0);
 8000834:	2100      	movs	r1, #0
 8000836:	2014      	movs	r0, #20
 8000838:	f7ff ff04 	bl	8000644 <__NVIC_SetPriority>
	NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800083c:	2015      	movs	r0, #21
 800083e:	f7ff fee5 	bl	800060c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000842:	b662      	cpsie	i
}
 8000844:	bf00      	nop



	for(;;)
	{
		SLAVE1_TX.id_type = CAN_ID.Standard;
 8000846:	2301      	movs	r3, #1
 8000848:	461a      	mov	r2, r3
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <main+0xc0>)
 800084c:	601a      	str	r2, [r3, #0]
		SLAVE1_TX.frame_type = CAN_Frame.Data_Frame;
 800084e:	2300      	movs	r3, #0
 8000850:	461a      	mov	r2, r3
 8000852:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <main+0xc0>)
 8000854:	605a      	str	r2, [r3, #4]
		SLAVE1_TX.send_timestamp = false;
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <main+0xc0>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
		SLAVE1_TX.ID = 0x200;
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <main+0xc0>)
 800085e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000862:	60da      	str	r2, [r3, #12]
		SLAVE1_TX.data_length = 8;
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <main+0xc0>)
 8000866:	2208      	movs	r2, #8
 8000868:	611a      	str	r2, [r3, #16]
		SLAVE1_TX.data[0] = 0x01;
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <main+0xc0>)
 800086c:	2201      	movs	r2, #1
 800086e:	615a      	str	r2, [r3, #20]
		SLAVE1_TX.data[1] = 0x02;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <main+0xc0>)
 8000872:	2202      	movs	r2, #2
 8000874:	619a      	str	r2, [r3, #24]
		SLAVE1_TX.data[2] = 0x03;
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <main+0xc0>)
 8000878:	2203      	movs	r2, #3
 800087a:	61da      	str	r2, [r3, #28]
		SLAVE1_TX.data[3] = 0x04;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <main+0xc0>)
 800087e:	2204      	movs	r2, #4
 8000880:	621a      	str	r2, [r3, #32]
		SLAVE1_TX.data[4] = 0x05;
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <main+0xc0>)
 8000884:	2205      	movs	r2, #5
 8000886:	625a      	str	r2, [r3, #36]	@ 0x24
		SLAVE1_TX.data[5] = 0x06;
 8000888:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <main+0xc0>)
 800088a:	2206      	movs	r2, #6
 800088c:	629a      	str	r2, [r3, #40]	@ 0x28
		SLAVE1_TX.data[6] = 0x07;
 800088e:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <main+0xc0>)
 8000890:	2207      	movs	r2, #7
 8000892:	62da      	str	r2, [r3, #44]	@ 0x2c
		SLAVE1_TX.data[7] = 0x08;
 8000894:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <main+0xc0>)
 8000896:	2208      	movs	r2, #8
 8000898:	631a      	str	r2, [r3, #48]	@ 0x30
		CAN_Send_Packet(&SLAVE1, &SLAVE1_TX);
 800089a:	4907      	ldr	r1, [pc, #28]	@ (80008b8 <main+0xc0>)
 800089c:	4803      	ldr	r0, [pc, #12]	@ (80008ac <main+0xb4>)
 800089e:	f7ff fd51 	bl	8000344 <CAN_Send_Packet>
		Delay_ms(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f7ff ff80 	bl	80007a8 <Delay_ms>
		SLAVE1_TX.id_type = CAN_ID.Standard;
 80008a8:	bf00      	nop
 80008aa:	e7cc      	b.n	8000846 <main+0x4e>
 80008ac:	20000020 	.word	0x20000020
 80008b0:	40006400 	.word	0x40006400
 80008b4:	001e0001 	.word	0x001e0001
 80008b8:	20000034 	.word	0x20000034

080008bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008da:	4b2f      	ldr	r3, [pc, #188]	@ (8000998 <SystemCoreClockUpdate+0xd0>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f003 030c 	and.w	r3, r3, #12
 80008e2:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2b08      	cmp	r3, #8
 80008e8:	d011      	beq.n	800090e <SystemCoreClockUpdate+0x46>
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b08      	cmp	r3, #8
 80008ee:	d83a      	bhi.n	8000966 <SystemCoreClockUpdate+0x9e>
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <SystemCoreClockUpdate+0x36>
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	d004      	beq.n	8000906 <SystemCoreClockUpdate+0x3e>
 80008fc:	e033      	b.n	8000966 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80008fe:	4b27      	ldr	r3, [pc, #156]	@ (800099c <SystemCoreClockUpdate+0xd4>)
 8000900:	4a27      	ldr	r2, [pc, #156]	@ (80009a0 <SystemCoreClockUpdate+0xd8>)
 8000902:	601a      	str	r2, [r3, #0]
      break;
 8000904:	e033      	b.n	800096e <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000906:	4b25      	ldr	r3, [pc, #148]	@ (800099c <SystemCoreClockUpdate+0xd4>)
 8000908:	4a25      	ldr	r2, [pc, #148]	@ (80009a0 <SystemCoreClockUpdate+0xd8>)
 800090a:	601a      	str	r2, [r3, #0]
      break;
 800090c:	e02f      	b.n	800096e <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800090e:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <SystemCoreClockUpdate+0xd0>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000916:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <SystemCoreClockUpdate+0xd0>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000920:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	0c9b      	lsrs	r3, r3, #18
 8000926:	3302      	adds	r3, #2
 8000928:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d106      	bne.n	800093e <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <SystemCoreClockUpdate+0xdc>)
 8000934:	fb02 f303 	mul.w	r3, r2, r3
 8000938:	4a18      	ldr	r2, [pc, #96]	@ (800099c <SystemCoreClockUpdate+0xd4>)
 800093a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 800093c:	e017      	b.n	800096e <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <SystemCoreClockUpdate+0xd0>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d006      	beq.n	8000958 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	4a15      	ldr	r2, [pc, #84]	@ (80009a4 <SystemCoreClockUpdate+0xdc>)
 800094e:	fb02 f303 	mul.w	r3, r2, r3
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <SystemCoreClockUpdate+0xd4>)
 8000954:	6013      	str	r3, [r2, #0]
      break;
 8000956:	e00a      	b.n	800096e <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	4a11      	ldr	r2, [pc, #68]	@ (80009a0 <SystemCoreClockUpdate+0xd8>)
 800095c:	fb02 f303 	mul.w	r3, r2, r3
 8000960:	4a0e      	ldr	r2, [pc, #56]	@ (800099c <SystemCoreClockUpdate+0xd4>)
 8000962:	6013      	str	r3, [r2, #0]
      break;
 8000964:	e003      	b.n	800096e <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <SystemCoreClockUpdate+0xd4>)
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <SystemCoreClockUpdate+0xd8>)
 800096a:	601a      	str	r2, [r3, #0]
      break;
 800096c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <SystemCoreClockUpdate+0xd0>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	091b      	lsrs	r3, r3, #4
 8000974:	f003 030f 	and.w	r3, r3, #15
 8000978:	4a0b      	ldr	r2, [pc, #44]	@ (80009a8 <SystemCoreClockUpdate+0xe0>)
 800097a:	5cd3      	ldrb	r3, [r2, r3]
 800097c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800097e:	4b07      	ldr	r3, [pc, #28]	@ (800099c <SystemCoreClockUpdate+0xd4>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	fa22 f303 	lsr.w	r3, r2, r3
 8000988:	4a04      	ldr	r2, [pc, #16]	@ (800099c <SystemCoreClockUpdate+0xd4>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	20000000 	.word	0x20000000
 80009a0:	007a1200 	.word	0x007a1200
 80009a4:	003d0900 	.word	0x003d0900
 80009a8:	08000a60 	.word	0x08000a60

080009ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009ac:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b0:	f7ff ff84 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	@ (80009ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <LoopForever+0xe>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	@ (80009f8 <LoopForever+0x16>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009da:	f000 f811 	bl	8000a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009de:	f7ff ff0b 	bl	80007f8 <main>

080009e2 <LoopForever>:

LoopForever:
  b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   r0, =_estack
 80009e4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80009f0:	08000a78 	.word	0x08000a78
  ldr r2, =_sbss
 80009f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80009f8:	20000068 	.word	0x20000068

080009fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_2_IRQHandler>
	...

08000a00 <__libc_init_array>:
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	2600      	movs	r6, #0
 8000a04:	4d0c      	ldr	r5, [pc, #48]	@ (8000a38 <__libc_init_array+0x38>)
 8000a06:	4c0d      	ldr	r4, [pc, #52]	@ (8000a3c <__libc_init_array+0x3c>)
 8000a08:	1b64      	subs	r4, r4, r5
 8000a0a:	10a4      	asrs	r4, r4, #2
 8000a0c:	42a6      	cmp	r6, r4
 8000a0e:	d109      	bne.n	8000a24 <__libc_init_array+0x24>
 8000a10:	f000 f81a 	bl	8000a48 <_init>
 8000a14:	2600      	movs	r6, #0
 8000a16:	4d0a      	ldr	r5, [pc, #40]	@ (8000a40 <__libc_init_array+0x40>)
 8000a18:	4c0a      	ldr	r4, [pc, #40]	@ (8000a44 <__libc_init_array+0x44>)
 8000a1a:	1b64      	subs	r4, r4, r5
 8000a1c:	10a4      	asrs	r4, r4, #2
 8000a1e:	42a6      	cmp	r6, r4
 8000a20:	d105      	bne.n	8000a2e <__libc_init_array+0x2e>
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a28:	4798      	blx	r3
 8000a2a:	3601      	adds	r6, #1
 8000a2c:	e7ee      	b.n	8000a0c <__libc_init_array+0xc>
 8000a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a32:	4798      	blx	r3
 8000a34:	3601      	adds	r6, #1
 8000a36:	e7f2      	b.n	8000a1e <__libc_init_array+0x1e>
 8000a38:	08000a70 	.word	0x08000a70
 8000a3c:	08000a70 	.word	0x08000a70
 8000a40:	08000a70 	.word	0x08000a70
 8000a44:	08000a74 	.word	0x08000a74

08000a48 <_init>:
 8000a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4a:	bf00      	nop
 8000a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4e:	bc08      	pop	{r3}
 8000a50:	469e      	mov	lr, r3
 8000a52:	4770      	bx	lr

08000a54 <_fini>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	bf00      	nop
 8000a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5a:	bc08      	pop	{r3}
 8000a5c:	469e      	mov	lr, r3
 8000a5e:	4770      	bx	lr
