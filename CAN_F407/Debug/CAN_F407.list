
CAN_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000410  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000598  08000598  00001598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005a8  080005a8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080005a8  080005a8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005a8  080005a8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a8  080005a8  000015a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005ac  080005ac  000015ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005b0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ee8  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000304  00000000  00000000  00002f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00003220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005f  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000003ca  00000000  00000000  0000330f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000db4  00000000  00000000  000036d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dc5a  00000000  00000000  0000448d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000920e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000140  00000000  00000000  0009212c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0009226c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000580 	.word	0x08000580

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000580 	.word	0x08000580

080001c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	db0a      	blt.n	80001f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	490c      	ldr	r1, [pc, #48]	@ (8000214 <__NVIC_SetPriority+0x4c>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	0112      	lsls	r2, r2, #4
 80001e8:	b2d2      	uxtb	r2, r2
 80001ea:	440b      	add	r3, r1
 80001ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001f0:	e00a      	b.n	8000208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	4908      	ldr	r1, [pc, #32]	@ (8000218 <__NVIC_SetPriority+0x50>)
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	f003 030f 	and.w	r3, r3, #15
 80001fe:	3b04      	subs	r3, #4
 8000200:	0112      	lsls	r2, r2, #4
 8000202:	b2d2      	uxtb	r2, r2
 8000204:	440b      	add	r3, r1
 8000206:	761a      	strb	r2, [r3, #24]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	e000e100 	.word	0xe000e100
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b01      	subs	r3, #1
 8000228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800022c:	d301      	bcc.n	8000232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800022e:	2301      	movs	r3, #1
 8000230:	e00f      	b.n	8000252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000232:	4a0a      	ldr	r2, [pc, #40]	@ (800025c <SysTick_Config+0x40>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3b01      	subs	r3, #1
 8000238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800023a:	210f      	movs	r1, #15
 800023c:	f04f 30ff 	mov.w	r0, #4294967295
 8000240:	f7ff ffc2 	bl	80001c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000244:	4b05      	ldr	r3, [pc, #20]	@ (800025c <SysTick_Config+0x40>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800024a:	4b04      	ldr	r3, [pc, #16]	@ (800025c <SysTick_Config+0x40>)
 800024c:	2207      	movs	r2, #7
 800024e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000250:	2300      	movs	r3, #0
}
 8000252:	4618      	mov	r0, r3
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	e000e010 	.word	0xe000e010

08000260 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	uint8_t pll_m = 8;
 8000266:	2308      	movs	r3, #8
 8000268:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 800026a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800026e:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8000274:	2307      	movs	r3, #7
 8000276:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 8000278:	4b3c      	ldr	r3, [pc, #240]	@ (800036c <MCU_Clock_Setup+0x10c>)
 800027a:	2200      	movs	r2, #0
 800027c:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800027e:	4b3b      	ldr	r3, [pc, #236]	@ (800036c <MCU_Clock_Setup+0x10c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a3a      	ldr	r2, [pc, #232]	@ (800036c <MCU_Clock_Setup+0x10c>)
 8000284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000288:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 800028a:	bf00      	nop
 800028c:	4b37      	ldr	r3, [pc, #220]	@ (800036c <MCU_Clock_Setup+0x10c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f9      	beq.n	800028c <MCU_Clock_Setup+0x2c>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8000298:	4b34      	ldr	r3, [pc, #208]	@ (800036c <MCU_Clock_Setup+0x10c>)
 800029a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800029c:	4a33      	ldr	r2, [pc, #204]	@ (800036c <MCU_Clock_Setup+0x10c>)
 800029e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002a2:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 80002a4:	4b32      	ldr	r3, [pc, #200]	@ (8000370 <MCU_Clock_Setup+0x110>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a31      	ldr	r2, [pc, #196]	@ (8000370 <MCU_Clock_Setup+0x110>)
 80002aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002ae:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80002b0:	4b30      	ldr	r3, [pc, #192]	@ (8000374 <MCU_Clock_Setup+0x114>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000374 <MCU_Clock_Setup+0x114>)
 80002b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80002ba:	f043 0305 	orr.w	r3, r3, #5
 80002be:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80002c0:	4b2a      	ldr	r3, [pc, #168]	@ (800036c <MCU_Clock_Setup+0x10c>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	78ba      	ldrb	r2, [r7, #2]
 80002c6:	0611      	lsls	r1, r2, #24
 80002c8:	78fa      	ldrb	r2, [r7, #3]
 80002ca:	0412      	lsls	r2, r2, #16
 80002cc:	4311      	orrs	r1, r2
 80002ce:	88ba      	ldrh	r2, [r7, #4]
 80002d0:	0192      	lsls	r2, r2, #6
 80002d2:	4311      	orrs	r1, r2
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	430a      	orrs	r2, r1
 80002d8:	4611      	mov	r1, r2
 80002da:	4a24      	ldr	r2, [pc, #144]	@ (800036c <MCU_Clock_Setup+0x10c>)
 80002dc:	430b      	orrs	r3, r1
 80002de:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 80002e0:	4b22      	ldr	r3, [pc, #136]	@ (800036c <MCU_Clock_Setup+0x10c>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4a21      	ldr	r2, [pc, #132]	@ (800036c <MCU_Clock_Setup+0x10c>)
 80002e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002ea:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 80002ec:	4b1f      	ldr	r3, [pc, #124]	@ (800036c <MCU_Clock_Setup+0x10c>)
 80002ee:	4a1f      	ldr	r2, [pc, #124]	@ (800036c <MCU_Clock_Setup+0x10c>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002f4:	4b1d      	ldr	r3, [pc, #116]	@ (800036c <MCU_Clock_Setup+0x10c>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a1c      	ldr	r2, [pc, #112]	@ (800036c <MCU_Clock_Setup+0x10c>)
 80002fa:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80002fe:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000300:	4b1a      	ldr	r3, [pc, #104]	@ (800036c <MCU_Clock_Setup+0x10c>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a19      	ldr	r2, [pc, #100]	@ (800036c <MCU_Clock_Setup+0x10c>)
 8000306:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800030a:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 800030c:	4b17      	ldr	r3, [pc, #92]	@ (800036c <MCU_Clock_Setup+0x10c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a16      	ldr	r2, [pc, #88]	@ (800036c <MCU_Clock_Setup+0x10c>)
 8000312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000316:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8000318:	bf00      	nop
 800031a:	4b14      	ldr	r3, [pc, #80]	@ (800036c <MCU_Clock_Setup+0x10c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000322:	2b00      	cmp	r3, #0
 8000324:	d0f9      	beq.n	800031a <MCU_Clock_Setup+0xba>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8000326:	4b11      	ldr	r3, [pc, #68]	@ (800036c <MCU_Clock_Setup+0x10c>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	4a10      	ldr	r2, [pc, #64]	@ (800036c <MCU_Clock_Setup+0x10c>)
 800032c:	f043 0302 	orr.w	r3, r3, #2
 8000330:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8000332:	bf00      	nop
 8000334:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <MCU_Clock_Setup+0x10c>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 0308 	and.w	r3, r3, #8
 800033c:	2b08      	cmp	r3, #8
 800033e:	d1f9      	bne.n	8000334 <MCU_Clock_Setup+0xd4>
	SystemCoreClockUpdate();
 8000340:	f000 f850 	bl	80003e4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <MCU_Clock_Setup+0x118>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	08db      	lsrs	r3, r3, #3
 800034a:	4a0c      	ldr	r2, [pc, #48]	@ (800037c <MCU_Clock_Setup+0x11c>)
 800034c:	fba2 2303 	umull	r2, r3, r2, r3
 8000350:	085b      	lsrs	r3, r3, #1
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff62 	bl	800021c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000358:	4b04      	ldr	r3, [pc, #16]	@ (800036c <MCU_Clock_Setup+0x10c>)
 800035a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800035c:	4a03      	ldr	r2, [pc, #12]	@ (800036c <MCU_Clock_Setup+0x10c>)
 800035e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000362:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40023800 	.word	0x40023800
 8000370:	40007000 	.word	0x40007000
 8000374:	40023c00 	.word	0x40023c00
 8000378:	20000000 	.word	0x20000000
 800037c:	18618619 	.word	0x18618619

08000380 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <Delay_Config+0x2c>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800038a:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <Delay_Config+0x2c>)
 800038c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8000390:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <Delay_Config+0x2c>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000398:	4b04      	ldr	r3, [pc, #16]	@ (80003ac <Delay_Config+0x2c>)
 800039a:	2205      	movs	r2, #5
 800039c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800039e:	2300      	movs	r3, #0
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	e000e010 	.word	0xe000e010

080003b0 <main>:
#include "main.h"



int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 80003b4:	f7ff ff54 	bl	8000260 <MCU_Clock_Setup>
	Delay_Config();
 80003b8:	f7ff ffe2 	bl	8000380 <Delay_Config>




	for(;;);
 80003bc:	bf00      	nop
 80003be:	e7fd      	b.n	80003bc <main+0xc>

080003c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <SystemInit+0x20>)
 80003c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ca:	4a05      	ldr	r2, [pc, #20]	@ (80003e0 <SystemInit+0x20>)
 80003cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b087      	sub	sp, #28
 80003e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
 80003f2:	2302      	movs	r3, #2
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	2302      	movs	r3, #2
 80003fc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003fe:	4b34      	ldr	r3, [pc, #208]	@ (80004d0 <SystemCoreClockUpdate+0xec>)
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	f003 030c 	and.w	r3, r3, #12
 8000406:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000408:	693b      	ldr	r3, [r7, #16]
 800040a:	2b08      	cmp	r3, #8
 800040c:	d011      	beq.n	8000432 <SystemCoreClockUpdate+0x4e>
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	2b08      	cmp	r3, #8
 8000412:	d844      	bhi.n	800049e <SystemCoreClockUpdate+0xba>
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d003      	beq.n	8000422 <SystemCoreClockUpdate+0x3e>
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d004      	beq.n	800042a <SystemCoreClockUpdate+0x46>
 8000420:	e03d      	b.n	800049e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000422:	4b2c      	ldr	r3, [pc, #176]	@ (80004d4 <SystemCoreClockUpdate+0xf0>)
 8000424:	4a2c      	ldr	r2, [pc, #176]	@ (80004d8 <SystemCoreClockUpdate+0xf4>)
 8000426:	601a      	str	r2, [r3, #0]
      break;
 8000428:	e03d      	b.n	80004a6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800042a:	4b2a      	ldr	r3, [pc, #168]	@ (80004d4 <SystemCoreClockUpdate+0xf0>)
 800042c:	4a2b      	ldr	r2, [pc, #172]	@ (80004dc <SystemCoreClockUpdate+0xf8>)
 800042e:	601a      	str	r2, [r3, #0]
      break;
 8000430:	e039      	b.n	80004a6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000432:	4b27      	ldr	r3, [pc, #156]	@ (80004d0 <SystemCoreClockUpdate+0xec>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	0d9b      	lsrs	r3, r3, #22
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800043e:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <SystemCoreClockUpdate+0xec>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000446:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d00c      	beq.n	8000468 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800044e:	4a23      	ldr	r2, [pc, #140]	@ (80004dc <SystemCoreClockUpdate+0xf8>)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	fbb2 f3f3 	udiv	r3, r2, r3
 8000456:	4a1e      	ldr	r2, [pc, #120]	@ (80004d0 <SystemCoreClockUpdate+0xec>)
 8000458:	6852      	ldr	r2, [r2, #4]
 800045a:	0992      	lsrs	r2, r2, #6
 800045c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000460:	fb02 f303 	mul.w	r3, r2, r3
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	e00b      	b.n	8000480 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000468:	4a1b      	ldr	r2, [pc, #108]	@ (80004d8 <SystemCoreClockUpdate+0xf4>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000470:	4a17      	ldr	r2, [pc, #92]	@ (80004d0 <SystemCoreClockUpdate+0xec>)
 8000472:	6852      	ldr	r2, [r2, #4]
 8000474:	0992      	lsrs	r2, r2, #6
 8000476:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800047a:	fb02 f303 	mul.w	r3, r2, r3
 800047e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000480:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <SystemCoreClockUpdate+0xec>)
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	0c1b      	lsrs	r3, r3, #16
 8000486:	f003 0303 	and.w	r3, r3, #3
 800048a:	3301      	adds	r3, #1
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	fbb2 f3f3 	udiv	r3, r2, r3
 8000498:	4a0e      	ldr	r2, [pc, #56]	@ (80004d4 <SystemCoreClockUpdate+0xf0>)
 800049a:	6013      	str	r3, [r2, #0]
      break;
 800049c:	e003      	b.n	80004a6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800049e:	4b0d      	ldr	r3, [pc, #52]	@ (80004d4 <SystemCoreClockUpdate+0xf0>)
 80004a0:	4a0d      	ldr	r2, [pc, #52]	@ (80004d8 <SystemCoreClockUpdate+0xf4>)
 80004a2:	601a      	str	r2, [r3, #0]
      break;
 80004a4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004a6:	4b0a      	ldr	r3, [pc, #40]	@ (80004d0 <SystemCoreClockUpdate+0xec>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	091b      	lsrs	r3, r3, #4
 80004ac:	f003 030f 	and.w	r3, r3, #15
 80004b0:	4a0b      	ldr	r2, [pc, #44]	@ (80004e0 <SystemCoreClockUpdate+0xfc>)
 80004b2:	5cd3      	ldrb	r3, [r2, r3]
 80004b4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80004b6:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <SystemCoreClockUpdate+0xf0>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	693b      	ldr	r3, [r7, #16]
 80004bc:	fa22 f303 	lsr.w	r3, r2, r3
 80004c0:	4a04      	ldr	r2, [pc, #16]	@ (80004d4 <SystemCoreClockUpdate+0xf0>)
 80004c2:	6013      	str	r3, [r2, #0]
}
 80004c4:	bf00      	nop
 80004c6:	371c      	adds	r7, #28
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40023800 	.word	0x40023800
 80004d4:	20000000 	.word	0x20000000
 80004d8:	00f42400 	.word	0x00f42400
 80004dc:	007a1200 	.word	0x007a1200
 80004e0:	08000598 	.word	0x08000598

080004e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e4:	480d      	ldr	r0, [pc, #52]	@ (800051c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e8:	f7ff ff6a 	bl	80003c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ec:	480c      	ldr	r0, [pc, #48]	@ (8000520 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ee:	490d      	ldr	r1, [pc, #52]	@ (8000524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000528 <LoopForever+0xe>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f4:	e002      	b.n	80004fc <LoopCopyDataInit>

080004f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fa:	3304      	adds	r3, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000500:	d3f9      	bcc.n	80004f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000502:	4a0a      	ldr	r2, [pc, #40]	@ (800052c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000504:	4c0a      	ldr	r4, [pc, #40]	@ (8000530 <LoopForever+0x16>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000508:	e001      	b.n	800050e <LoopFillZerobss>

0800050a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800050c:	3204      	adds	r2, #4

0800050e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000510:	d3fb      	bcc.n	800050a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000512:	f000 f811 	bl	8000538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000516:	f7ff ff4b 	bl	80003b0 <main>

0800051a <LoopForever>:

LoopForever:
  b LoopForever
 800051a:	e7fe      	b.n	800051a <LoopForever>
  ldr   r0, =_estack
 800051c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000524:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000528:	080005b0 	.word	0x080005b0
  ldr r2, =_sbss
 800052c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000530:	20000020 	.word	0x20000020

08000534 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000534:	e7fe      	b.n	8000534 <ADC_IRQHandler>
	...

08000538 <__libc_init_array>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	4d0d      	ldr	r5, [pc, #52]	@ (8000570 <__libc_init_array+0x38>)
 800053c:	4c0d      	ldr	r4, [pc, #52]	@ (8000574 <__libc_init_array+0x3c>)
 800053e:	1b64      	subs	r4, r4, r5
 8000540:	10a4      	asrs	r4, r4, #2
 8000542:	2600      	movs	r6, #0
 8000544:	42a6      	cmp	r6, r4
 8000546:	d109      	bne.n	800055c <__libc_init_array+0x24>
 8000548:	4d0b      	ldr	r5, [pc, #44]	@ (8000578 <__libc_init_array+0x40>)
 800054a:	4c0c      	ldr	r4, [pc, #48]	@ (800057c <__libc_init_array+0x44>)
 800054c:	f000 f818 	bl	8000580 <_init>
 8000550:	1b64      	subs	r4, r4, r5
 8000552:	10a4      	asrs	r4, r4, #2
 8000554:	2600      	movs	r6, #0
 8000556:	42a6      	cmp	r6, r4
 8000558:	d105      	bne.n	8000566 <__libc_init_array+0x2e>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000560:	4798      	blx	r3
 8000562:	3601      	adds	r6, #1
 8000564:	e7ee      	b.n	8000544 <__libc_init_array+0xc>
 8000566:	f855 3b04 	ldr.w	r3, [r5], #4
 800056a:	4798      	blx	r3
 800056c:	3601      	adds	r6, #1
 800056e:	e7f2      	b.n	8000556 <__libc_init_array+0x1e>
 8000570:	080005a8 	.word	0x080005a8
 8000574:	080005a8 	.word	0x080005a8
 8000578:	080005a8 	.word	0x080005a8
 800057c:	080005ac 	.word	0x080005ac

08000580 <_init>:
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000582:	bf00      	nop
 8000584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000586:	bc08      	pop	{r3}
 8000588:	469e      	mov	lr, r3
 800058a:	4770      	bx	lr

0800058c <_fini>:
 800058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058e:	bf00      	nop
 8000590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000592:	bc08      	pop	{r3}
 8000594:	469e      	mov	lr, r3
 8000596:	4770      	bx	lr
