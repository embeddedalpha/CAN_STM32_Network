
CAN_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ab8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000c40  08000c40  00001c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c50  08000c50  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000c50  08000c50  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c50  08000c50  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c50  08000c50  00001c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c54  08000c54  00001c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000c58  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000034  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003f36  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008b5  00000000  00000000  00005f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00006820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000101  00000000  00000000  00006988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c35  00000000  00000000  00006a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002621  00000000  00000000  000206be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e734  00000000  00000000  00022cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b1413  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000047c  00000000  00000000  000b1458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  000b18d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000c28 	.word	0x08000c28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000c28 	.word	0x08000c28

080001c8 <__NVIC_EnableIRQ>:
//    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
//  }
//}

__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <CAN1_RX0_IRQHandler>:
 volatile bool CAN2_RX0_Flag;
 volatile bool CAN2_RX1_Flag;
/************************************************************************/

/************************************************************************/
void CAN1_RX0_IRQHandler(void) {
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	CAN1_RX0_Flag = 1;
 8000208:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <CAN1_RX0_IRQHandler+0x14>)
 800020a:	2201      	movs	r2, #1
 800020c:	701a      	strb	r2, [r3, #0]
}
 800020e:	bf00      	nop
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	20000020 	.word	0x20000020

0800021c <CAN1_RX1_IRQHandler>:
/************************************************************************/
void CAN1_RX1_IRQHandler(void) {
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	CAN1_RX1_Flag = 1;
 8000220:	4b03      	ldr	r3, [pc, #12]	@ (8000230 <CAN1_RX1_IRQHandler+0x14>)
 8000222:	2201      	movs	r2, #1
 8000224:	701a      	strb	r2, [r3, #0]
}
 8000226:	bf00      	nop
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	20000021 	.word	0x20000021

08000234 <CAN2_RX0_IRQHandler>:
/************************************************************************/
void CAN2_RX0_IRQHandler(void) {
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	CAN2_RX0_Flag = 1;
 8000238:	4b03      	ldr	r3, [pc, #12]	@ (8000248 <CAN2_RX0_IRQHandler+0x14>)
 800023a:	2201      	movs	r2, #1
 800023c:	701a      	strb	r2, [r3, #0]
}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	20000022 	.word	0x20000022

0800024c <CAN2_RX1_IRQHandler>:
/************************************************************************/
void CAN2_RX1_IRQHandler(void) {
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	CAN2_RX1_Flag = 1;
 8000250:	4b03      	ldr	r3, [pc, #12]	@ (8000260 <CAN2_RX1_IRQHandler+0x14>)
 8000252:	2201      	movs	r2, #1
 8000254:	701a      	strb	r2, [r3, #0]
}
 8000256:	bf00      	nop
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	20000023 	.word	0x20000023

08000264 <CAN_Init>:
 * @operation		:	Configures the CAN controller as per the CAN_Config struct.
 *                      Take a look at the examples and the CAN_Config structure for
 *                      more information
 */
int CAN_Init(CAN_Config *config)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b087      	sub	sp, #28
 8000268:	af04      	add	r7, sp, #16
 800026a:	6078      	str	r0, [r7, #4]
    if(config->CAN_INSTANCE == CAN_Configuration.Instance._CAN1)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a81      	ldr	r2, [pc, #516]	@ (8000478 <CAN_Init+0x214>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d17c      	bne.n	8000370 <CAN_Init+0x10c>
    {

    	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8000276:	4b81      	ldr	r3, [pc, #516]	@ (800047c <CAN_Init+0x218>)
 8000278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800027a:	4a80      	ldr	r2, [pc, #512]	@ (800047c <CAN_Init+0x218>)
 800027c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000280:	6413      	str	r3, [r2, #64]	@ 0x40
        if(config->RX_Pin == CAN_Configuration.Pin._CAN1.RX.PA11){
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	791b      	ldrb	r3, [r3, #4]
 8000286:	220b      	movs	r2, #11
 8000288:	4293      	cmp	r3, r2
 800028a:	d10e      	bne.n	80002aa <CAN_Init+0x46>
        	GPIO_Pin_Init(GPIOA, 11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.CAN_1);
 800028c:	2002      	movs	r0, #2
 800028e:	2400      	movs	r4, #0
 8000290:	2303      	movs	r3, #3
 8000292:	2200      	movs	r2, #0
 8000294:	2109      	movs	r1, #9
 8000296:	9102      	str	r1, [sp, #8]
 8000298:	9201      	str	r2, [sp, #4]
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	4623      	mov	r3, r4
 800029e:	4602      	mov	r2, r0
 80002a0:	210b      	movs	r1, #11
 80002a2:	4877      	ldr	r0, [pc, #476]	@ (8000480 <CAN_Init+0x21c>)
 80002a4:	f000 fa6c 	bl	8000780 <GPIO_Pin_Init>
 80002a8:	e026      	b.n	80002f8 <CAN_Init+0x94>
        }
        else if(config->RX_Pin == CAN_Configuration.Pin._CAN1.RX.PD0){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	2204      	movs	r2, #4
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d10e      	bne.n	80002d2 <CAN_Init+0x6e>
        	GPIO_Pin_Init(GPIOD, 0, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.CAN_1);
 80002b4:	2002      	movs	r0, #2
 80002b6:	2400      	movs	r4, #0
 80002b8:	2303      	movs	r3, #3
 80002ba:	2200      	movs	r2, #0
 80002bc:	2109      	movs	r1, #9
 80002be:	9102      	str	r1, [sp, #8]
 80002c0:	9201      	str	r2, [sp, #4]
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	4623      	mov	r3, r4
 80002c6:	4602      	mov	r2, r0
 80002c8:	2100      	movs	r1, #0
 80002ca:	486e      	ldr	r0, [pc, #440]	@ (8000484 <CAN_Init+0x220>)
 80002cc:	f000 fa58 	bl	8000780 <GPIO_Pin_Init>
 80002d0:	e012      	b.n	80002f8 <CAN_Init+0x94>
        }
        else if(config->RX_Pin == CAN_Configuration.Pin._CAN1.RX.PB8){
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	791b      	ldrb	r3, [r3, #4]
 80002d6:	2209      	movs	r2, #9
 80002d8:	4293      	cmp	r3, r2
 80002da:	d10d      	bne.n	80002f8 <CAN_Init+0x94>
             GPIO_Pin_Init(GPIOB, 8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.CAN_1);
 80002dc:	2002      	movs	r0, #2
 80002de:	2400      	movs	r4, #0
 80002e0:	2303      	movs	r3, #3
 80002e2:	2200      	movs	r2, #0
 80002e4:	2109      	movs	r1, #9
 80002e6:	9102      	str	r1, [sp, #8]
 80002e8:	9201      	str	r2, [sp, #4]
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	4623      	mov	r3, r4
 80002ee:	4602      	mov	r2, r0
 80002f0:	2108      	movs	r1, #8
 80002f2:	4865      	ldr	r0, [pc, #404]	@ (8000488 <CAN_Init+0x224>)
 80002f4:	f000 fa44 	bl	8000780 <GPIO_Pin_Init>
        }

        if(config->TX_Pin == CAN_Configuration.Pin._CAN1.TX.PA12){
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	795b      	ldrb	r3, [r3, #5]
 80002fc:	220c      	movs	r2, #12
 80002fe:	4293      	cmp	r3, r2
 8000300:	d10e      	bne.n	8000320 <CAN_Init+0xbc>
        	GPIO_Pin_Init(GPIOA, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.CAN_1);
 8000302:	2002      	movs	r0, #2
 8000304:	2400      	movs	r4, #0
 8000306:	2303      	movs	r3, #3
 8000308:	2200      	movs	r2, #0
 800030a:	2109      	movs	r1, #9
 800030c:	9102      	str	r1, [sp, #8]
 800030e:	9201      	str	r2, [sp, #4]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	4623      	mov	r3, r4
 8000314:	4602      	mov	r2, r0
 8000316:	210c      	movs	r1, #12
 8000318:	4859      	ldr	r0, [pc, #356]	@ (8000480 <CAN_Init+0x21c>)
 800031a:	f000 fa31 	bl	8000780 <GPIO_Pin_Init>
 800031e:	e080      	b.n	8000422 <CAN_Init+0x1be>
        }
        else if(config->TX_Pin == CAN_Configuration.Pin._CAN1.TX.PD1){
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	795b      	ldrb	r3, [r3, #5]
 8000324:	2205      	movs	r2, #5
 8000326:	4293      	cmp	r3, r2
 8000328:	d10e      	bne.n	8000348 <CAN_Init+0xe4>
        	GPIO_Pin_Init(GPIOD, 1, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.CAN_1);
 800032a:	2002      	movs	r0, #2
 800032c:	2400      	movs	r4, #0
 800032e:	2303      	movs	r3, #3
 8000330:	2200      	movs	r2, #0
 8000332:	2109      	movs	r1, #9
 8000334:	9102      	str	r1, [sp, #8]
 8000336:	9201      	str	r2, [sp, #4]
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	4623      	mov	r3, r4
 800033c:	4602      	mov	r2, r0
 800033e:	2101      	movs	r1, #1
 8000340:	4850      	ldr	r0, [pc, #320]	@ (8000484 <CAN_Init+0x220>)
 8000342:	f000 fa1d 	bl	8000780 <GPIO_Pin_Init>
 8000346:	e06c      	b.n	8000422 <CAN_Init+0x1be>
        }
        else if(config->TX_Pin == CAN_Configuration.Pin._CAN1.TX.PB9){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	795b      	ldrb	r3, [r3, #5]
 800034c:	220a      	movs	r2, #10
 800034e:	4293      	cmp	r3, r2
 8000350:	d167      	bne.n	8000422 <CAN_Init+0x1be>
        	GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.CAN_1);
 8000352:	2002      	movs	r0, #2
 8000354:	2400      	movs	r4, #0
 8000356:	2303      	movs	r3, #3
 8000358:	2200      	movs	r2, #0
 800035a:	2109      	movs	r1, #9
 800035c:	9102      	str	r1, [sp, #8]
 800035e:	9201      	str	r2, [sp, #4]
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	4623      	mov	r3, r4
 8000364:	4602      	mov	r2, r0
 8000366:	2109      	movs	r1, #9
 8000368:	4847      	ldr	r0, [pc, #284]	@ (8000488 <CAN_Init+0x224>)
 800036a:	f000 fa09 	bl	8000780 <GPIO_Pin_Init>
 800036e:	e058      	b.n	8000422 <CAN_Init+0x1be>
        }
    }
    else if(config->CAN_INSTANCE == CAN_Configuration.Instance._CAN2)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a45      	ldr	r2, [pc, #276]	@ (800048c <CAN_Init+0x228>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d153      	bne.n	8000422 <CAN_Init+0x1be>
    {
    	RCC->APB1ENR |= RCC_APB1ENR_CAN2EN;
 800037a:	4b40      	ldr	r3, [pc, #256]	@ (800047c <CAN_Init+0x218>)
 800037c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800037e:	4a3f      	ldr	r2, [pc, #252]	@ (800047c <CAN_Init+0x218>)
 8000380:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000384:	6413      	str	r3, [r2, #64]	@ 0x40
        if(config->RX_Pin == CAN_Configuration.Pin._CAN2.RX.PB12){
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	791b      	ldrb	r3, [r3, #4]
 800038a:	220d      	movs	r2, #13
 800038c:	4293      	cmp	r3, r2
 800038e:	d10e      	bne.n	80003ae <CAN_Init+0x14a>
        	GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.CAN_2);
 8000390:	2002      	movs	r0, #2
 8000392:	2400      	movs	r4, #0
 8000394:	2303      	movs	r3, #3
 8000396:	2200      	movs	r2, #0
 8000398:	2109      	movs	r1, #9
 800039a:	9102      	str	r1, [sp, #8]
 800039c:	9201      	str	r2, [sp, #4]
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	4623      	mov	r3, r4
 80003a2:	4602      	mov	r2, r0
 80003a4:	210c      	movs	r1, #12
 80003a6:	4838      	ldr	r0, [pc, #224]	@ (8000488 <CAN_Init+0x224>)
 80003a8:	f000 f9ea 	bl	8000780 <GPIO_Pin_Init>
 80003ac:	e012      	b.n	80003d4 <CAN_Init+0x170>
        }
        else if(config->RX_Pin == CAN_Configuration.Pin._CAN2.RX.PB5){
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	791b      	ldrb	r3, [r3, #4]
 80003b2:	2206      	movs	r2, #6
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d10d      	bne.n	80003d4 <CAN_Init+0x170>
        	GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.CAN_2);
 80003b8:	2002      	movs	r0, #2
 80003ba:	2400      	movs	r4, #0
 80003bc:	2303      	movs	r3, #3
 80003be:	2200      	movs	r2, #0
 80003c0:	2109      	movs	r1, #9
 80003c2:	9102      	str	r1, [sp, #8]
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	4623      	mov	r3, r4
 80003ca:	4602      	mov	r2, r0
 80003cc:	2105      	movs	r1, #5
 80003ce:	482e      	ldr	r0, [pc, #184]	@ (8000488 <CAN_Init+0x224>)
 80003d0:	f000 f9d6 	bl	8000780 <GPIO_Pin_Init>
        }

        if(config->TX_Pin == CAN_Configuration.Pin._CAN2.TX.PB13){
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	2210      	movs	r2, #16
 80003da:	4293      	cmp	r3, r2
 80003dc:	d10e      	bne.n	80003fc <CAN_Init+0x198>
        	GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.CAN_2);
 80003de:	2002      	movs	r0, #2
 80003e0:	2400      	movs	r4, #0
 80003e2:	2303      	movs	r3, #3
 80003e4:	2200      	movs	r2, #0
 80003e6:	2109      	movs	r1, #9
 80003e8:	9102      	str	r1, [sp, #8]
 80003ea:	9201      	str	r2, [sp, #4]
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	4623      	mov	r3, r4
 80003f0:	4602      	mov	r2, r0
 80003f2:	210d      	movs	r1, #13
 80003f4:	4824      	ldr	r0, [pc, #144]	@ (8000488 <CAN_Init+0x224>)
 80003f6:	f000 f9c3 	bl	8000780 <GPIO_Pin_Init>
 80003fa:	e012      	b.n	8000422 <CAN_Init+0x1be>
        }
        else if(config->TX_Pin == CAN_Configuration.Pin._CAN2.TX.PB6){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	795b      	ldrb	r3, [r3, #5]
 8000400:	2207      	movs	r2, #7
 8000402:	4293      	cmp	r3, r2
 8000404:	d10d      	bne.n	8000422 <CAN_Init+0x1be>
        	GPIO_Pin_Init(GPIOB, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.CAN_2);
 8000406:	2002      	movs	r0, #2
 8000408:	2400      	movs	r4, #0
 800040a:	2303      	movs	r3, #3
 800040c:	2200      	movs	r2, #0
 800040e:	2109      	movs	r1, #9
 8000410:	9102      	str	r1, [sp, #8]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	4623      	mov	r3, r4
 8000418:	4602      	mov	r2, r0
 800041a:	2106      	movs	r1, #6
 800041c:	481a      	ldr	r0, [pc, #104]	@ (8000488 <CAN_Init+0x224>)
 800041e:	f000 f9af 	bl	8000780 <GPIO_Pin_Init>



//    config -> CAN_INSTANCE -> MCR |=   CAN_MCR_RESET | CAN_MCR_SLEEP;
//    while(!(config -> CAN_INSTANCE  -> MSR & CAN_MSR_SLAK)){}
    config -> CAN_INSTANCE -> MCR &= ~CAN_MCR_SLEEP;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f022 0202 	bic.w	r2, r2, #2
 8000430:	601a      	str	r2, [r3, #0]
    config -> CAN_INSTANCE -> MCR |= CAN_MCR_INRQ;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f042 0201 	orr.w	r2, r2, #1
 8000440:	601a      	str	r2, [r3, #0]
//	while((config -> CAN_INSTANCE -> MSR & CAN_MSR_SLAK)){}
	while(!(config -> CAN_INSTANCE-> MSR & CAN_MSR_INAK)){}
 8000442:	bf00      	nop
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f8      	beq.n	8000444 <CAN_Init+0x1e0>

	config -> CAN_INSTANCE -> BTR = config -> Baudrate;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	6892      	ldr	r2, [r2, #8]
 800045a:	61da      	str	r2, [r3, #28]


    // Enable CAN receive FIFO 0 interrupt
    config -> CAN_INSTANCE->IER |= CAN_IER_FMPIE0;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	695a      	ldr	r2, [r3, #20]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f042 0202 	orr.w	r2, r2, #2
 800046a:	615a      	str	r2, [r3, #20]





	return 1;
 800046c:	2301      	movs	r3, #1
}
 800046e:	4618      	mov	r0, r3
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	bd90      	pop	{r4, r7, pc}
 8000476:	bf00      	nop
 8000478:	40006400 	.word	0x40006400
 800047c:	40023800 	.word	0x40023800
 8000480:	40020000 	.word	0x40020000
 8000484:	40020c00 	.word	0x40020c00
 8000488:	40020400 	.word	0x40020400
 800048c:	40006800 	.word	0x40006800

08000490 <CAN_Activate_Callback>:

int CAN_Activate_Callback(CAN_Config *config, uint32_t CAN_Interrupt_ID)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
	config->CAN_INSTANCE->IER = CAN_Interrupt_ID;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	683a      	ldr	r2, [r7, #0]
 80004a0:	615a      	str	r2, [r3, #20]


    if(config->CAN_INSTANCE == CAN_Configuration.Instance._CAN1)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a13      	ldr	r2, [pc, #76]	@ (80004f4 <CAN_Activate_Callback+0x64>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d10c      	bne.n	80004c6 <CAN_Activate_Callback+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
    {
    	__disable_irq();
        // Enable CAN1 TX interrupt in NVIC
        NVIC_EnableIRQ(CAN1_TX_IRQn);
 80004b0:	2013      	movs	r0, #19
 80004b2:	f7ff fe89 	bl	80001c8 <__NVIC_EnableIRQ>
        // Enable CAN1 RX0 interrupt in NVIC
        NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80004b6:	2014      	movs	r0, #20
 80004b8:	f7ff fe86 	bl	80001c8 <__NVIC_EnableIRQ>
        // Enable CAN1 RX0 interrupt in NVIC
        NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80004bc:	2015      	movs	r0, #21
 80004be:	f7ff fe83 	bl	80001c8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80004c2:	b662      	cpsie	i
}
 80004c4:	e011      	b.n	80004ea <CAN_Activate_Callback+0x5a>
        __enable_irq();
    }
    else if(config->CAN_INSTANCE == CAN_Configuration.Instance._CAN2)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a0b      	ldr	r2, [pc, #44]	@ (80004f8 <CAN_Activate_Callback+0x68>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d10c      	bne.n	80004ea <CAN_Activate_Callback+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80004d0:	b672      	cpsid	i
}
 80004d2:	bf00      	nop
    {
    	__disable_irq();
        // Enable CAN1 TX interrupt in NVIC
        NVIC_EnableIRQ(CAN2_TX_IRQn);
 80004d4:	203f      	movs	r0, #63	@ 0x3f
 80004d6:	f7ff fe77 	bl	80001c8 <__NVIC_EnableIRQ>
        // Enable CAN1 RX0 interrupt in NVIC
        NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80004da:	2040      	movs	r0, #64	@ 0x40
 80004dc:	f7ff fe74 	bl	80001c8 <__NVIC_EnableIRQ>
        // Enable CAN1 RX0 interrupt in NVIC
        NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80004e0:	2041      	movs	r0, #65	@ 0x41
 80004e2:	f7ff fe71 	bl	80001c8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80004e6:	b662      	cpsie	i
}
 80004e8:	bf00      	nop
        __enable_irq();
    }

    return 1;
 80004ea:	2301      	movs	r3, #1
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40006400 	.word	0x40006400
 80004f8:	40006800 	.word	0x40006800

080004fc <CAN_Start>:
//}
//


void CAN_Start(CAN_Config *config)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	config -> CAN_INSTANCE -> MCR &= ~CAN_MCR_SLEEP;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f022 0202 	bic.w	r2, r2, #2
 8000512:	601a      	str	r2, [r3, #0]
	while((config -> CAN_INSTANCE -> MSR & CAN_MSR_SLAK)){}
 8000514:	bf00      	nop
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	f003 0302 	and.w	r3, r3, #2
 8000520:	2b00      	cmp	r3, #0
 8000522:	d1f8      	bne.n	8000516 <CAN_Start+0x1a>
	config -> CAN_INSTANCE -> MCR &= ~CAN_MCR_INRQ;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f022 0201 	bic.w	r2, r2, #1
 8000532:	601a      	str	r2, [r3, #0]
	while((config -> CAN_INSTANCE ->MSR & CAN_MSR_INAK));
 8000534:	bf00      	nop
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1f8      	bne.n	8000536 <CAN_Start+0x3a>
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <CAN_Set_Filter_List_Dummy>:
    return 1;
}


int CAN_Set_Filter_List_Dummy(uint32_t id1, uint32_t id2, uint8_t filterBank, uint8_t fifoAssignment)
{
 8000554:	b480      	push	{r7}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	4611      	mov	r1, r2
 8000560:	461a      	mov	r2, r3
 8000562:	460b      	mov	r3, r1
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	4613      	mov	r3, r2
 8000568:	71bb      	strb	r3, [r7, #6]
    // Enter filter initialization mode

    CAN1 -> FA1R &= ~1 << filterBank;
 800056a:	4b54      	ldr	r3, [pc, #336]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 800056c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000570:	79fa      	ldrb	r2, [r7, #7]
 8000572:	f06f 0101 	mvn.w	r1, #1
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a4f      	ldr	r2, [pc, #316]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 800057e:	400b      	ands	r3, r1
 8000580:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
    CAN1 -> FMR = 0x2D << 8;
 8000584:	4b4d      	ldr	r3, [pc, #308]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 8000586:	f44f 5234 	mov.w	r2, #11520	@ 0x2d00
 800058a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CAN1 -> FMR |=  CAN_FMR_FINIT;
 800058e:	4b4b      	ldr	r3, [pc, #300]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 8000590:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000594:	4a49      	ldr	r2, [pc, #292]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

    // Deactivate the filter
    CAN1 -> FA1R &= ~(1 << filterBank);
 800059e:	4b47      	ldr	r3, [pc, #284]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 80005a0:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	2101      	movs	r1, #1
 80005a8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ac:	43d2      	mvns	r2, r2
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a42      	ldr	r2, [pc, #264]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 80005b2:	400b      	ands	r3, r1
 80005b4:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

    // Set filter scale to 32-bit (each filter bank can store two 32-bit IDs in list mode)
    CAN1 -> FS1R |= (1 << filterBank);
 80005b8:	4b40      	ldr	r3, [pc, #256]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 80005ba:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	2101      	movs	r1, #1
 80005c2:	fa01 f202 	lsl.w	r2, r1, r2
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a3c      	ldr	r2, [pc, #240]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c

    // Set filter mode to list mode
    CAN1 -> FM1R |= (1 << filterBank);
 80005d0:	4b3a      	ldr	r3, [pc, #232]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 80005d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80005d6:	79fa      	ldrb	r2, [r7, #7]
 80005d8:	2101      	movs	r1, #1
 80005da:	fa01 f202 	lsl.w	r2, r1, r2
 80005de:	4611      	mov	r1, r2
 80005e0:	4a36      	ldr	r2, [pc, #216]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204

    // Set the filter IDs

    if(id1 < 0x7FF)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d810      	bhi.n	8000614 <CAN_Set_Filter_List_Dummy+0xc0>
    {
    	volatile uint32_t *CAN2_Filter_14 = (uint32_t *)0x40006AB0;
 80005f2:	4b33      	ldr	r3, [pc, #204]	@ (80006c0 <CAN_Set_Filter_List_Dummy+0x16c>)
 80005f4:	617b      	str	r3, [r7, #20]
    	*CAN2_Filter_14 |= id1 << 21;
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	055b      	lsls	r3, r3, #21
 80005fe:	431a      	orrs	r2, r3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	601a      	str	r2, [r3, #0]
    	 CAN1 -> sFilterRegister[filterBank].FR1 = id1 << 21;  // Standard ID
 8000604:	492d      	ldr	r1, [pc, #180]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	0552      	lsls	r2, r2, #21
 800060c:	3348      	adds	r3, #72	@ 0x48
 800060e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8000612:	e005      	b.n	8000620 <CAN_Set_Filter_List_Dummy+0xcc>
    }
    else
    {
    	CAN1 -> sFilterRegister[filterBank].FR1 = id1 << 0;  // Extended ID
 8000614:	4929      	ldr	r1, [pc, #164]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	3348      	adds	r3, #72	@ 0x48
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    }
    if(id2 < 0x7FF)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000626:	4293      	cmp	r3, r2
 8000628:	d808      	bhi.n	800063c <CAN_Set_Filter_List_Dummy+0xe8>
    {
    	 CAN1 -> sFilterRegister[filterBank].FR2 = id2 << 21;  // Standard ID
 800062a:	4924      	ldr	r1, [pc, #144]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	0552      	lsls	r2, r2, #21
 8000632:	3348      	adds	r3, #72	@ 0x48
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	440b      	add	r3, r1
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	e006      	b.n	800064a <CAN_Set_Filter_List_Dummy+0xf6>
    }
    else
    {
    	CAN1 -> sFilterRegister[filterBank].FR2 = id2 << 0;  // Extended ID
 800063c:	4a1f      	ldr	r2, [pc, #124]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	3348      	adds	r3, #72	@ 0x48
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	605a      	str	r2, [r3, #4]
    }

    // Assign the filter to the specified FIFO
    if (fifoAssignment == 0) {
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d10d      	bne.n	800066c <CAN_Set_Filter_List_Dummy+0x118>
        CAN1 -> FFA1R &= ~(1 << filterBank);
 8000650:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 8000652:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000656:	79fa      	ldrb	r2, [r7, #7]
 8000658:	2101      	movs	r1, #1
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	43d2      	mvns	r2, r2
 8000660:	4611      	mov	r1, r2
 8000662:	4a16      	ldr	r2, [pc, #88]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 8000664:	400b      	ands	r3, r1
 8000666:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
 800066a:	e00b      	b.n	8000684 <CAN_Set_Filter_List_Dummy+0x130>
    } else {
        CAN1 -> FFA1R |= (1 << filterBank);
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 800066e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	2101      	movs	r1, #1
 8000676:	fa01 f202 	lsl.w	r2, r1, r2
 800067a:	4611      	mov	r1, r2
 800067c:	4a0f      	ldr	r2, [pc, #60]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 800067e:	430b      	orrs	r3, r1
 8000680:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    }

    // Activate the filter
    CAN1 -> FA1R |= (1 << filterBank);
 8000684:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 8000686:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800068a:	79fa      	ldrb	r2, [r7, #7]
 800068c:	2101      	movs	r1, #1
 800068e:	fa01 f202 	lsl.w	r2, r1, r2
 8000692:	4611      	mov	r1, r2
 8000694:	4a09      	ldr	r2, [pc, #36]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 8000696:	430b      	orrs	r3, r1
 8000698:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

    // Exit filter initialization mode
    CAN1 -> FMR &= ~CAN_FMR_FINIT;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 800069e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80006a2:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <CAN_Set_Filter_List_Dummy+0x168>)
 80006a4:	f023 0301 	bic.w	r3, r3, #1
 80006a8:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

    return 1;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	371c      	adds	r7, #28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40006400 	.word	0x40006400
 80006c0:	40006ab0 	.word	0x40006ab0

080006c4 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a25      	ldr	r2, [pc, #148]	@ (8000764 <GPIO_Clock_Enable+0xa0>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d106      	bne.n	80006e2 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d8:	4a23      	ldr	r2, [pc, #140]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e0:	e039      	b.n	8000756 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <GPIO_Clock_Enable+0xa8>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 80006ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	e02e      	b.n	8000756 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a1d      	ldr	r2, [pc, #116]	@ (8000770 <GPIO_Clock_Enable+0xac>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000704:	4a18      	ldr	r2, [pc, #96]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6313      	str	r3, [r2, #48]	@ 0x30
 800070c:	e023      	b.n	8000756 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a18      	ldr	r2, [pc, #96]	@ (8000774 <GPIO_Clock_Enable+0xb0>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a13      	ldr	r2, [pc, #76]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	e018      	b.n	8000756 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a14      	ldr	r2, [pc, #80]	@ (8000778 <GPIO_Clock_Enable+0xb4>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d106      	bne.n	800073a <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000730:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	6313      	str	r3, [r2, #48]	@ 0x30
 8000738:	e00d      	b.n	8000756 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a0f      	ldr	r2, [pc, #60]	@ (800077c <GPIO_Clock_Enable+0xb8>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <GPIO_Clock_Enable+0xa4>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	e002      	b.n	8000756 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	e000      	b.n	8000758 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40020000 	.word	0x40020000
 8000768:	40023800 	.word	0x40023800
 800076c:	40020400 	.word	0x40020400
 8000770:	40020800 	.word	0x40020800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40021000 	.word	0x40021000
 800077c:	40021c00 	.word	0x40021c00

08000780 <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	4608      	mov	r0, r1
 800078a:	4611      	mov	r1, r2
 800078c:	461a      	mov	r2, r3
 800078e:	4603      	mov	r3, r0
 8000790:	70fb      	strb	r3, [r7, #3]
 8000792:	460b      	mov	r3, r1
 8000794:	70bb      	strb	r3, [r7, #2]
 8000796:	4613      	mov	r3, r2
 8000798:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ff92 	bl	80006c4 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	78b9      	ldrb	r1, [r7, #2]
 80007a6:	78fa      	ldrb	r2, [r7, #3]
 80007a8:	0052      	lsls	r2, r2, #1
 80007aa:	fa01 f202 	lsl.w	r2, r1, r2
 80007ae:	431a      	orrs	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	7879      	ldrb	r1, [r7, #1]
 80007ba:	78fa      	ldrb	r2, [r7, #3]
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	431a      	orrs	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	7c39      	ldrb	r1, [r7, #16]
 80007cc:	78fa      	ldrb	r2, [r7, #3]
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	fa01 f202 	lsl.w	r2, r1, r2
 80007d4:	431a      	orrs	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	7d39      	ldrb	r1, [r7, #20]
 80007e0:	78fa      	ldrb	r2, [r7, #3]
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	431a      	orrs	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d80a      	bhi.n	800080a <GPIO_Pin_Init+0x8a>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6a1b      	ldr	r3, [r3, #32]
 80007f8:	7e39      	ldrb	r1, [r7, #24]
 80007fa:	78fa      	ldrb	r2, [r7, #3]
 80007fc:	0092      	lsls	r2, r2, #2
 80007fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000802:	431a      	orrs	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8000808:	e00a      	b.n	8000820 <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800080e:	7e39      	ldrb	r1, [r7, #24]
 8000810:	78fa      	ldrb	r2, [r7, #3]
 8000812:	3a08      	subs	r2, #8
 8000814:	0092      	lsls	r2, r2, #2
 8000816:	fa01 f202 	lsl.w	r2, r1, r2
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	db0a      	blt.n	8000852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	490c      	ldr	r1, [pc, #48]	@ (8000874 <__NVIC_SetPriority+0x4c>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	0112      	lsls	r2, r2, #4
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	440b      	add	r3, r1
 800084c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000850:	e00a      	b.n	8000868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4908      	ldr	r1, [pc, #32]	@ (8000878 <__NVIC_SetPriority+0x50>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	3b04      	subs	r3, #4
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	440b      	add	r3, r1
 8000866:	761a      	strb	r2, [r3, #24]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800088c:	d301      	bcc.n	8000892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088e:	2301      	movs	r3, #1
 8000890:	e00f      	b.n	80008b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <SysTick_Config+0x40>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089a:	210f      	movs	r1, #15
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f7ff ffc2 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <SysTick_Config+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <SysTick_Config+0x40>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	uint8_t pll_m = 8;
 80008c6:	2308      	movs	r3, #8
 80008c8:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 80008ca:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008ce:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 80008d4:	2307      	movs	r3, #7
 80008d6:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 80008d8:	4b3c      	ldr	r3, [pc, #240]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80008de:	4b3b      	ldr	r3, [pc, #236]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a3a      	ldr	r2, [pc, #232]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 80008e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008e8:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80008ea:	bf00      	nop
 80008ec:	4b37      	ldr	r3, [pc, #220]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f9      	beq.n	80008ec <MCU_Clock_Setup+0x2c>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80008f8:	4b34      	ldr	r3, [pc, #208]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a33      	ldr	r2, [pc, #204]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8000904:	4b32      	ldr	r3, [pc, #200]	@ (80009d0 <MCU_Clock_Setup+0x110>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a31      	ldr	r2, [pc, #196]	@ (80009d0 <MCU_Clock_Setup+0x110>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090e:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8000910:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <MCU_Clock_Setup+0x114>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a2f      	ldr	r2, [pc, #188]	@ (80009d4 <MCU_Clock_Setup+0x114>)
 8000916:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800091a:	f043 0305 	orr.w	r3, r3, #5
 800091e:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8000920:	4b2a      	ldr	r3, [pc, #168]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	78ba      	ldrb	r2, [r7, #2]
 8000926:	0611      	lsls	r1, r2, #24
 8000928:	78fa      	ldrb	r2, [r7, #3]
 800092a:	0412      	lsls	r2, r2, #16
 800092c:	4311      	orrs	r1, r2
 800092e:	88ba      	ldrh	r2, [r7, #4]
 8000930:	0192      	lsls	r2, r2, #6
 8000932:	4311      	orrs	r1, r2
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	430a      	orrs	r2, r1
 8000938:	4611      	mov	r1, r2
 800093a:	4a24      	ldr	r2, [pc, #144]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 800093c:	430b      	orrs	r3, r1
 800093e:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8000940:	4b22      	ldr	r3, [pc, #136]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4a21      	ldr	r2, [pc, #132]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 8000946:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800094a:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 800094e:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000954:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	4a1c      	ldr	r2, [pc, #112]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 800095a:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800095e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000960:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 8000966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800096a:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 800096c:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a16      	ldr	r2, [pc, #88]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 8000972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000976:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8000978:	bf00      	nop
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f9      	beq.n	800097a <MCU_Clock_Setup+0xba>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	4a10      	ldr	r2, [pc, #64]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8000992:	bf00      	nop
 8000994:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	2b08      	cmp	r3, #8
 800099e:	d1f9      	bne.n	8000994 <MCU_Clock_Setup+0xd4>
	SystemCoreClockUpdate();
 80009a0:	f000 f874 	bl	8000a8c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MCU_Clock_Setup+0x118>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	4a0c      	ldr	r2, [pc, #48]	@ (80009dc <MCU_Clock_Setup+0x11c>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ff62 	bl	800087c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80009b8:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 80009ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009bc:	4a03      	ldr	r2, [pc, #12]	@ (80009cc <MCU_Clock_Setup+0x10c>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40007000 	.word	0x40007000
 80009d4:	40023c00 	.word	0x40023c00
 80009d8:	20000000 	.word	0x20000000
 80009dc:	18618619 	.word	0x18618619

080009e0 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <Delay_Config+0x2c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <Delay_Config+0x2c>)
 80009ec:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80009f0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <Delay_Config+0x2c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <Delay_Config+0x2c>)
 80009fa:	2205      	movs	r2, #5
 80009fc:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <main>:




int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8000a14:	f7ff ff54 	bl	80008c0 <MCU_Clock_Setup>
	Delay_Config();
 8000a18:	f7ff ffe2 	bl	80009e0 <Delay_Config>

	Master1.CAN_INSTANCE = CAN_Configuration.Instance._CAN1;
 8000a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <main+0x4c>)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <main+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
	Master1.Baudrate = CAN_Configuration.Baudrate._1000_KBPS;
 8000a22:	4a10      	ldr	r2, [pc, #64]	@ (8000a64 <main+0x54>)
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <main+0x50>)
 8000a26:	609a      	str	r2, [r3, #8]
	Master1.RX_Pin = CAN_Configuration.Pin._CAN1.RX.PD0;
 8000a28:	2204      	movs	r2, #4
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <main+0x50>)
 8000a2c:	711a      	strb	r2, [r3, #4]
	Master1.TX_Pin = CAN_Configuration.Pin._CAN1.TX.PD1;
 8000a2e:	2205      	movs	r2, #5
 8000a30:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <main+0x50>)
 8000a32:	715a      	strb	r2, [r3, #5]
	CAN_Init(&Master1);
 8000a34:	480a      	ldr	r0, [pc, #40]	@ (8000a60 <main+0x50>)
 8000a36:	f7ff fc15 	bl	8000264 <CAN_Init>
//	Master2.Baudrate = CAN_Configuration.Baudrate._1000_KBPS;
//	Master2.RX_Pin = CAN_Configuration.Pin._CAN2.RX.PB12;
//	Master2.TX_Pin = CAN_Configuration.Pin._CAN2.TX.PB13;
//	CAN_Init(&Master2);
//	CAN_Set_Filter_List(&Master1, 0x200, 0x202, 0, 0);
	CAN_Set_Filter_List_Dummy(0x200, 0, 0, 0);
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a44:	f7ff fd86 	bl	8000554 <CAN_Set_Filter_List_Dummy>
	CAN_Activate_Callback(&Master1, CAN_Configuration.Interrupt_ID.FIFO0_Full_Interrupt);
 8000a48:	2304      	movs	r3, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <main+0x50>)
 8000a4e:	f7ff fd1f 	bl	8000490 <CAN_Activate_Callback>

	CAN_Start(&Master1);
 8000a52:	4803      	ldr	r0, [pc, #12]	@ (8000a60 <main+0x50>)
 8000a54:	f7ff fd52 	bl	80004fc <CAN_Start>





	for(;;)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <main+0x48>
 8000a5c:	40006400 	.word	0x40006400
 8000a60:	20000024 	.word	0x20000024
 8000a64:	001a0002 	.word	0x001a0002

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <SystemInit+0x20>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a05      	ldr	r2, [pc, #20]	@ (8000a88 <SystemInit+0x20>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b087      	sub	sp, #28
 8000a90:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000aa6:	4b34      	ldr	r3, [pc, #208]	@ (8000b78 <SystemCoreClockUpdate+0xec>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	f003 030c 	and.w	r3, r3, #12
 8000aae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	2b08      	cmp	r3, #8
 8000ab4:	d011      	beq.n	8000ada <SystemCoreClockUpdate+0x4e>
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	2b08      	cmp	r3, #8
 8000aba:	d844      	bhi.n	8000b46 <SystemCoreClockUpdate+0xba>
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <SystemCoreClockUpdate+0x3e>
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d004      	beq.n	8000ad2 <SystemCoreClockUpdate+0x46>
 8000ac8:	e03d      	b.n	8000b46 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000aca:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <SystemCoreClockUpdate+0xf0>)
 8000acc:	4a2c      	ldr	r2, [pc, #176]	@ (8000b80 <SystemCoreClockUpdate+0xf4>)
 8000ace:	601a      	str	r2, [r3, #0]
      break;
 8000ad0:	e03d      	b.n	8000b4e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <SystemCoreClockUpdate+0xf0>)
 8000ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8000b84 <SystemCoreClockUpdate+0xf8>)
 8000ad6:	601a      	str	r2, [r3, #0]
      break;
 8000ad8:	e039      	b.n	8000b4e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000ada:	4b27      	ldr	r3, [pc, #156]	@ (8000b78 <SystemCoreClockUpdate+0xec>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	0d9b      	lsrs	r3, r3, #22
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ae6:	4b24      	ldr	r3, [pc, #144]	@ (8000b78 <SystemCoreClockUpdate+0xec>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000aee:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00c      	beq.n	8000b10 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000af6:	4a23      	ldr	r2, [pc, #140]	@ (8000b84 <SystemCoreClockUpdate+0xf8>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4a1e      	ldr	r2, [pc, #120]	@ (8000b78 <SystemCoreClockUpdate+0xec>)
 8000b00:	6852      	ldr	r2, [r2, #4]
 8000b02:	0992      	lsrs	r2, r2, #6
 8000b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b08:	fb02 f303 	mul.w	r3, r2, r3
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e00b      	b.n	8000b28 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b10:	4a1b      	ldr	r2, [pc, #108]	@ (8000b80 <SystemCoreClockUpdate+0xf4>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	4a17      	ldr	r2, [pc, #92]	@ (8000b78 <SystemCoreClockUpdate+0xec>)
 8000b1a:	6852      	ldr	r2, [r2, #4]
 8000b1c:	0992      	lsrs	r2, r2, #6
 8000b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b28:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <SystemCoreClockUpdate+0xec>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	0c1b      	lsrs	r3, r3, #16
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	3301      	adds	r3, #1
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b40:	4a0e      	ldr	r2, [pc, #56]	@ (8000b7c <SystemCoreClockUpdate+0xf0>)
 8000b42:	6013      	str	r3, [r2, #0]
      break;
 8000b44:	e003      	b.n	8000b4e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <SystemCoreClockUpdate+0xf0>)
 8000b48:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <SystemCoreClockUpdate+0xf4>)
 8000b4a:	601a      	str	r2, [r3, #0]
      break;
 8000b4c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <SystemCoreClockUpdate+0xec>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	f003 030f 	and.w	r3, r3, #15
 8000b58:	4a0b      	ldr	r2, [pc, #44]	@ (8000b88 <SystemCoreClockUpdate+0xfc>)
 8000b5a:	5cd3      	ldrb	r3, [r2, r3]
 8000b5c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <SystemCoreClockUpdate+0xf0>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	fa22 f303 	lsr.w	r3, r2, r3
 8000b68:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <SystemCoreClockUpdate+0xf0>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	371c      	adds	r7, #28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	00f42400 	.word	0x00f42400
 8000b84:	007a1200 	.word	0x007a1200
 8000b88:	08000c40 	.word	0x08000c40

08000b8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b8c:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b90:	f7ff ff6a 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bba:	f000 f811 	bl	8000be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bbe:	f7ff ff27 	bl	8000a10 <main>

08000bc2 <LoopForever>:

LoopForever:
  b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   r0, =_estack
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000bd0:	08000c58 	.word	0x08000c58
  ldr r2, =_sbss
 8000bd4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000bd8:	20000038 	.word	0x20000038

08000bdc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <__libc_init_array>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	4d0d      	ldr	r5, [pc, #52]	@ (8000c18 <__libc_init_array+0x38>)
 8000be4:	4c0d      	ldr	r4, [pc, #52]	@ (8000c1c <__libc_init_array+0x3c>)
 8000be6:	1b64      	subs	r4, r4, r5
 8000be8:	10a4      	asrs	r4, r4, #2
 8000bea:	2600      	movs	r6, #0
 8000bec:	42a6      	cmp	r6, r4
 8000bee:	d109      	bne.n	8000c04 <__libc_init_array+0x24>
 8000bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8000c20 <__libc_init_array+0x40>)
 8000bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8000c24 <__libc_init_array+0x44>)
 8000bf4:	f000 f818 	bl	8000c28 <_init>
 8000bf8:	1b64      	subs	r4, r4, r5
 8000bfa:	10a4      	asrs	r4, r4, #2
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	42a6      	cmp	r6, r4
 8000c00:	d105      	bne.n	8000c0e <__libc_init_array+0x2e>
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
 8000c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c08:	4798      	blx	r3
 8000c0a:	3601      	adds	r6, #1
 8000c0c:	e7ee      	b.n	8000bec <__libc_init_array+0xc>
 8000c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c12:	4798      	blx	r3
 8000c14:	3601      	adds	r6, #1
 8000c16:	e7f2      	b.n	8000bfe <__libc_init_array+0x1e>
 8000c18:	08000c50 	.word	0x08000c50
 8000c1c:	08000c50 	.word	0x08000c50
 8000c20:	08000c50 	.word	0x08000c50
 8000c24:	08000c54 	.word	0x08000c54

08000c28 <_init>:
 8000c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2a:	bf00      	nop
 8000c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c2e:	bc08      	pop	{r3}
 8000c30:	469e      	mov	lr, r3
 8000c32:	4770      	bx	lr

08000c34 <_fini>:
 8000c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c36:	bf00      	nop
 8000c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c3a:	bc08      	pop	{r3}
 8000c3c:	469e      	mov	lr, r3
 8000c3e:	4770      	bx	lr
